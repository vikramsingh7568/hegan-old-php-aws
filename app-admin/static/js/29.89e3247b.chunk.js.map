{"version":3,"sources":["app/views/admin/OrderHistory/UpdateOrder.js","app/views/admin/OrderHistory/PurchaseList.js"],"names":["BootstrapDialogTitle","props","children","onClose","other","DialogTitle","sx","m","p","IconButton","onClick","position","right","top","color","theme","palette","grey","UpdateOrder","open","setOpen","useState","handleClose","Dialog","maxWidth","id","DialogContent","dividers","style","height","overflowY","CardContent","Box","width","overflow","DialogActions","StyledTable","styled","Table","Container","margin","breakpoints","down","marginBottom","Small","padding","borderRadius","background","bgcolor","boxShadow","cursor","PurchaseList","useTheme","bgError","error","main","bgPrimary","primary","bgSecondary","secondary","bgSuccess","success","bgSuccessLight","light","bgSecondaryDark","dark","page","setPage","rowsPerPage","setRowsPerPage","tableData","setTableData","setLoading","useEffect","fetchData","axios","get","then","response","post","data","response_code","catch","console","__handleCancelOrder","row_id","order_id","swal","title","text","icon","buttons","dangerMode","isConfirm","reData","map","item","message","e","__handleOrderShipped","hash_order_id","resetPw","Swal","fire","focusConfirm","html","showCancelButton","cancelButtonColor","confirmButtonText","confirmButtonColor","allowOutsideClick","preConfirm","tracking_url","document","getElementById","value","swalval","v","dismiss","type","isConfirmed","className","routeSegments","name","path","Card","CardHeader","titleTypographyProps","variant","fontSize","fontWeight","textTransform","textAlign","Divider","minWidth","TableHead","TableRow","TableCell","align","TableBody","slice","row","index","to","total_mrp","total_savings","total_payable","Moment","created_at","format","transaction_id","orderUpdate","transactionId","__handleUpdateTransactionId","payment_status","status","Button","size","invoice_number","number_of_box","total_weight","__handleReadyToShip","return_valid","product_expire","checked","product_damaged","__handleReturnOrder","component","Link","colSpan","CircularProgress","TablePagination","px","count","length","onPageChange","_","newPage","rowsPerPageOptions","onRowsPerPageChange","event","target","nextIconButtonProps","backIconButtonProps"],"mappings":"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","file":"static/js/29.89e3247b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  CardContent,\r\n  Box,\r\n  Dialog,\r\n  DialogTitle, DialogContent, DialogActions,\r\n  IconButton,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport swal from 'sweetalert';\r\n\r\nfunction BootstrapDialogTitle(props: DialogTitleProps) {\r\n  const { children, onClose, ...other } = props;\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n}\r\n\r\nconst UpdateOrder = ({ open, setOpen }) => {\r\n  const [loading, setLoading] = useState();\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      maxWidth=\"md\"\r\n      open={open}\r\n      onClose={handleClose}>\r\n      <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        Details\r\n      </BootstrapDialogTitle>\r\n      <DialogContent dividers style={{ height: '600px', overflowY: 'auto' }}>\r\n        <CardContent>\r\n          <Box width=\"100%\" overflow=\"auto\">\r\n            <h3>What is Lorem Ipsum?</h3>\r\n            <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n              Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an\r\n              unknown printer took a galley of type and scrambled it to make a type specimen book.\r\n              It has survived not only five centuries, but also the leap into electronic typesetting,\r\n              remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset\r\n              sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus\r\n              PageMaker including versions of Lorem Ipsum.\r\n            </p>\r\n\r\n            <h3>Why do we use it?</h3>\r\n            <p>It is a long established fact that a reader will be distracted by the readable content of a\r\n              page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less\r\n              normal distribution of letters, as opposed to using 'Content here, content here', making it look\r\n              like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as\r\n              their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy.\r\n              Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and\r\n              the like).\r\n            </p>\r\n\r\n            <h3> Where does it come from?</h3>\r\n            <p>Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of\r\n              classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin\r\n              professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words,\r\n              consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature,\r\n              discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum\r\n              et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory\r\n              of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\",\r\n              comes from a line in section 1.10.32.\r\n            </p>\r\n            <p>The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for\r\n              those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\"\r\n              by Cicero are also reproduced in their exact original form, accompanied by English\r\n              versions from the 1914 translation by H. Rackham.\r\n            </p>\r\n          </Box>\r\n        </CardContent>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        {/* <Button onClick={handleOrderUpdate} type='submit'\r\n          variant=\"contained\" color=\"success\" size='medium'\r\n          sx={{ fontSize: '15px', fontWeight: \"700\" }}>\r\n          Update\r\n        </Button> */}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\nexport default UpdateOrder;","import { useState, useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\nimport swal from 'sweetalert';\r\nimport {\r\n  Card,\r\n  Divider,\r\n  CardContent,\r\n  CardHeader,\r\n  Box,\r\n  Icon,\r\n  IconButton,\r\n  Button,\r\n  styled,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  CircularProgress,\r\n  useTheme\r\n} from \"@mui/material\";\r\n\r\nimport GroupIcon from '@mui/icons-material/Group';\r\n\r\nimport Moment from 'moment';\r\n\r\nimport { Breadcrumb } from \"app/components\";\r\nimport UpdateOrder from \"./UpdateOrder\";\r\n\r\nconst StyledTable = styled(Table)(() => ({\r\n  // whiteSpace: \"pre\",\r\n  // \"& thead\": {\r\n  //   \"& tr\": { \"& th\": { paddingLeft: 0, paddingRight: 0 } },\r\n  // },\r\n  // \"& tbody\": {\r\n  //   \"& tr\": { \"& td\": { paddingLeft: 0, textTransform: \"capitalize\" } },\r\n  // },\r\n}));\r\n\r\nconst Container = styled(\"div\")(({ theme }) => (\r\n  {\r\n    margin: \"30px\",\r\n    [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\r\n    \"& .breadcrumb\": {\r\n      marginBottom: \"30px\",\r\n      [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\r\n    },\r\n  }\r\n));\r\nconst ContentBox = styled(Box)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  position: 'relative',\r\n  // background: 'rgba(0, 0, 0, 0.01)',\r\n}));\r\n\r\nconst Small = styled('small')(({ bgcolor }) => ({\r\n  width: 50,\r\n  height: 15,\r\n  color: '#fff',\r\n  padding: '5px 8px',\r\n  borderRadius: '4px',\r\n  overflow: 'hidden',\r\n  background: bgcolor,\r\n  boxShadow: '0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24)',\r\n  cursor: 'pointer'\r\n}));\r\n\r\nconst PurchaseList = () => {\r\n  const { palette } = useTheme();\r\n  const bgError = palette.error.main;\r\n  const bgPrimary = palette.primary.main;\r\n  const bgSecondary = palette.secondary.main;\r\n  const bgSuccess = palette.success.main;\r\n  const bgSuccessLight = palette.success.light;\r\n  const bgSecondaryDark = palette.secondary.dark;\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(20);\r\n  const [tableData, setTableData] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  /**\r\n   * Fetching data from server.\r\n   */\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await axios.get('/sanctum/csrf-cookie').then(response => {\r\n        axios.post('/api/admin/get-order-purchase-list')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setTableData(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            } else {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n      });\r\n    } catch (e) {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  const handleChangePage = (_, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const __handleUpdateTransactionId = (row_id, order_id, hash_order_id) => {\r\n    const orderUpdate = async () => {\r\n      const swalval = await Swal.fire({\r\n        title: `Order Id: ${hash_order_id} `,\r\n        focusConfirm: false,\r\n        html: `\r\n        <input class=\"swal2-input\" id=\"transactionId\" type=\"text\" placeholder=\"Transaction Id...\" style=\"width: 80%;\"/><br />\r\n      `,\r\n        icon: 'success',\r\n        showCancelButton: true,\r\n        cancelButtonColor: 'grey',\r\n        confirmButtonText: 'Update!',\r\n        confirmButtonColor: 'green',\r\n        allowOutsideClick: false,\r\n        preConfirm: () => ({\r\n          transactionId: document.getElementById('transactionId').value,\r\n        })\r\n      });\r\n      let v = swalval && swalval.value || swalval.dismiss;\r\n      if (v && v.transactionId || v === 'cancel') {\r\n        if (v.transactionId === '') {\r\n          await Swal.fire({ type: 'error', title: 'Transaction Id is required!' });\r\n          orderUpdate();\r\n        } else if (v !== 'cancel') {\r\n          if (swalval.isConfirmed) {\r\n            try {\r\n              axios.get('/sanctum/csrf-cookie').then(response => {\r\n                axios.post('/api/admin/update-order-trans-id', {\r\n                  'row_id': row_id,\r\n                  'order_id': order_id,\r\n                  'transaction_id': swalval.value.transactionId,\r\n                })\r\n                  .then(response => {\r\n                    if (response.data.response_code === 200) {\r\n                      var reData = response.data.data;\r\n                      setTableData(tableData.map(item =>\r\n                        item.id === row_id\r\n                          ? reData\r\n                          : item\r\n                      ));\r\n                      swal({\r\n                        title: 'Done!',\r\n                        text: response.data.message,\r\n                        icon: 'success'\r\n                      })\r\n                    } else if (response.data.response_code === 412) {\r\n                      swal({\r\n                        title: \"Errors!\",\r\n                        text: response.data.message,\r\n                        icon: \"error\",\r\n                      });\r\n                    } else {\r\n                      swal({\r\n                        title: \"Errors!\",\r\n                        text: response.data.message,\r\n                        icon: \"error\",\r\n                      });\r\n                    }\r\n                    setLoading(false);\r\n                  })\r\n                  .catch(function (error) {\r\n                    setLoading(false);\r\n                    console.error(error);\r\n                  });\r\n              });\r\n            } catch (e) {\r\n              setLoading(false);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        await Swal.fire({ icon: 'error', title: 'Please enter payment transaction Id!' });\r\n        orderUpdate();\r\n      }\r\n    }\r\n    orderUpdate();\r\n  }\r\n\r\n  const __handleCancelOrder = (row_id, order_id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"You want to cancel \\\"\" + order_id + \"\\\" order!\",\r\n      icon: \"warning\",\r\n      buttons: [\r\n        'No, cancel it!',\r\n        'Yes, I am sure!'\r\n      ],\r\n      dangerMode: true,\r\n    }).then(function (isConfirm) {\r\n      if (isConfirm) {\r\n        try {\r\n          axios.get('/sanctum/csrf-cookie').then(response => {\r\n            axios.post('/api/admin/cancel-order', {\r\n              'row_id': row_id\r\n            })\r\n              .then(response => {\r\n                if (response.data.response_code === 200) {\r\n                  var reData = response.data.data;\r\n                  setTableData(tableData.map(item =>\r\n                    item.id === row_id\r\n                      ? reData\r\n                      : item\r\n                  ));\r\n                  swal({\r\n                    title: 'Done!',\r\n                    text: response.data.message,\r\n                    icon: 'success'\r\n                  })\r\n                } else if (response.data.response_code === 412) {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                } else {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                }\r\n                setLoading(false);\r\n              })\r\n              .catch(function (error) {\r\n                setLoading(false);\r\n                console.error(error);\r\n              });\r\n          });\r\n        } catch (e) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const __handleCancelRefunded = (row_id, order_id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"You want to refund of \\\"\" + order_id + \"\\\" order!\",\r\n      icon: \"warning\",\r\n      buttons: [\r\n        'No, cancel it!',\r\n        'Yes, I am sure!'\r\n      ],\r\n      dangerMode: true,\r\n    }).then(function (isConfirm) {\r\n      if (isConfirm) {\r\n        try {\r\n          axios.get('/sanctum/csrf-cookie').then(response => {\r\n            axios.post('/api/admin/order-cancel-refund', {\r\n              'row_id': row_id,\r\n              'order_status': 'refund',\r\n            })\r\n              .then(response => {\r\n                if (response.data.response_code === 200) {\r\n                  var reData = response.data.data;\r\n                  setTableData(tableData.map(item =>\r\n                    item.id === row_id\r\n                      ? reData\r\n                      : item\r\n                  ));\r\n                  swal({\r\n                    title: 'Done!',\r\n                    text: 'Order refunded successfully.',\r\n                    icon: 'success'\r\n                  })\r\n                } else if (response.data.response_code === 412) {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                } else {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                }\r\n                setLoading(false);\r\n              })\r\n              .catch(function (error) {\r\n                setLoading(false);\r\n                console.error(error);\r\n              });\r\n          });\r\n        } catch (e) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const __handleReadyToShip = (row_id, hash_order_id) => {\r\n    const resetPw = async () => {\r\n      const swalval = await Swal.fire({\r\n        title: `Order Id: ${hash_order_id} `,\r\n        focusConfirm: false,\r\n        html: `\r\n        <input class=\"swal2-input\" id=\"invoice_number\" type=\"text\" placeholder=\"Invoice Number\" style=\"width: 80%;\"/><br />\r\n        <input class=\"swal2-input\" id=\"number_of_box\" type=\"text\" placeholder=\"No. of Boxes\" style=\"width: 80%;\"/><br />\r\n        <input class=\"swal2-input\" id=\"total_weight\" type=\"text\" placeholder=\"Total Weight(kg)\" style=\"width: 80%;\"/><br />\r\n      `,\r\n        icon: 'success',\r\n        showCancelButton: true,\r\n        cancelButtonColor: 'grey',\r\n        confirmButtonText: 'Submit!',\r\n        confirmButtonColor: 'green',\r\n        allowOutsideClick: false,\r\n        preConfirm: () => ({\r\n          invoice_number: document.getElementById('invoice_number').value,\r\n          number_of_box: document.getElementById('number_of_box').value,\r\n          total_weight: document.getElementById('total_weight').value,\r\n\r\n        })\r\n      });\r\n      let v = swalval && swalval.value || swalval.dismiss;\r\n      if (v.invoice_number === '' || v.number_of_box === '' || v.total_weight === '') {\r\n        await Swal.fire({ type: 'error', title: 'All Fields is required!' });\r\n        resetPw();\r\n      } else if (v !== 'cancel') {\r\n        if (swalval.isConfirmed) {\r\n          try {\r\n            axios.get('/sanctum/csrf-cookie').then(response => {\r\n              axios.post('/api/admin/update-purchase-order-status', {\r\n                'row_id': row_id,\r\n                'invoice_number': swalval.value.invoice_number,\r\n                'number_of_box': swalval.value.number_of_box,\r\n                'total_weight': swalval.value.total_weight,\r\n                'order_status': 'ready_to_ship',\r\n              })\r\n                .then(response => {\r\n                  if (response.data.response_code === 200) {\r\n                    var reData = response.data.data;\r\n                    setTableData(tableData.map(item =>\r\n                      item.id === row_id\r\n                        ? reData\r\n                        : item\r\n                    ));\r\n                    swal({\r\n                      title: 'Done!',\r\n                      text: 'Order has been rady to shiped.',\r\n                      icon: 'success'\r\n                    })\r\n                  } else if (response.data.response_code === 412) {\r\n                    swal({\r\n                      title: \"Errors!\",\r\n                      text: response.data.message,\r\n                      icon: \"error\",\r\n                    });\r\n                  } else {\r\n                    swal({\r\n                      title: \"Errors!\",\r\n                      text: response.data.message,\r\n                      icon: \"error\",\r\n                    });\r\n                  }\r\n                  setLoading(false);\r\n                })\r\n                .catch(function (error) {\r\n                  setLoading(false);\r\n                  console.error(error);\r\n                });\r\n            });\r\n          } catch (e) {\r\n            setLoading(false);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    resetPw();\r\n  }\r\n  const __handleOrderShipped = (row_id, hash_order_id) => {\r\n    const resetPw = async () => {\r\n      const swalval = await Swal.fire({\r\n        title: `Order Id: ${hash_order_id} `,\r\n        focusConfirm: false,\r\n        html: `\r\n        <input class=\"swal2-input\" id=\"tracking_url\" type=\"text\" placeholder=\"Tracking URL\" style=\"width: 80%;\"/><br />\r\n      `,\r\n        icon: 'success',\r\n        showCancelButton: true,\r\n        cancelButtonColor: 'grey',\r\n        confirmButtonText: 'Submit!',\r\n        confirmButtonColor: 'green',\r\n        allowOutsideClick: false,\r\n        preConfirm: () => ({\r\n          tracking_url: document.getElementById('tracking_url').value,\r\n        })\r\n      });\r\n      let v = swalval && swalval.value || swalval.dismiss;\r\n      if (v.tracking_url === '') {\r\n        await Swal.fire({ type: 'error', title: 'Tracking URL Fields is required!' });\r\n        resetPw();\r\n      } else if (v !== 'cancel') {\r\n        if (swalval.isConfirmed) {\r\n          try {\r\n            axios.get('/sanctum/csrf-cookie').then(response => {\r\n              axios.post('/api/admin/update-purchase-order-status', {\r\n                'row_id': row_id,\r\n                'tracking_url': swalval.value.tracking_url,\r\n                'order_status': 'shipped',\r\n              })\r\n                .then(response => {\r\n                  if (response.data.response_code === 200) {\r\n                    var reData = response.data.data;\r\n                    setTableData(tableData.map(item =>\r\n                      item.id === row_id\r\n                        ? reData\r\n                        : item\r\n                    ));\r\n                    swal({\r\n                      title: 'Done!',\r\n                      text: 'Your order has been successfully shipped.',\r\n                      icon: 'success'\r\n                    })\r\n                  } else if (response.data.response_code === 412) {\r\n                    swal({\r\n                      title: \"Errors!\",\r\n                      text: response.data.message,\r\n                      icon: \"error\",\r\n                    });\r\n                  } else {\r\n                    swal({\r\n                      title: \"Errors!\",\r\n                      text: response.data.message,\r\n                      icon: \"error\",\r\n                    });\r\n                  }\r\n                  setLoading(false);\r\n                })\r\n                .catch(function (error) {\r\n                  setLoading(false);\r\n                  console.error(error);\r\n                });\r\n            });\r\n          } catch (e) {\r\n            setLoading(false);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    resetPw();\r\n  }\r\n  const __handleOrderDelivered = (row_id, order_id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"You want to delivered \\\"\" + order_id + \"\\\" order!\",\r\n      icon: \"warning\",\r\n      buttons: [\r\n        'No, cancel it!',\r\n        'Yes, I am sure!'\r\n      ],\r\n      dangerMode: true,\r\n    }).then(function (isConfirm) {\r\n      if (isConfirm) {\r\n        try {\r\n          axios.get('/sanctum/csrf-cookie').then(response => {\r\n            axios.post('/api/admin/update-purchase-order-status', {\r\n              'row_id': row_id,\r\n              'order_status': 'delivered',\r\n            })\r\n              .then(response => {\r\n                if (response.data.response_code === 200) {\r\n                  var reData = response.data.data;\r\n                  setTableData(tableData.map(item =>\r\n                    item.id === row_id\r\n                      ? reData\r\n                      : item\r\n                  ));\r\n                  swal({\r\n                    title: 'Done!',\r\n                    text: 'Order has been successfully delivered.',\r\n                    icon: 'success'\r\n                  })\r\n                } else if (response.data.response_code === 412) {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                } else {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                }\r\n                setLoading(false);\r\n              })\r\n              .catch(function (error) {\r\n                setLoading(false);\r\n                console.error(error);\r\n              });\r\n          });\r\n        } catch (e) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const __handleReturnOrder = (row_id, order_id) => {\r\n    const resetPw = async () => {\r\n      const swalval = await Swal.fire({\r\n        title: `Order Id: ${order_id} `,\r\n        focusConfirm: false,\r\n        html: `\r\n        <div style=\"text-align: left;  padding:0px 20px;\">\r\n          <br />\r\n          <p>Reason of Returning</p>\r\n          <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"expired\" id=\"product_expire\">\r\n                <label class=\"form-check-label\" for=\"product_expire\">\r\n                  Product received is expired.\r\n                </label>\r\n          </div>\r\n          <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"damaged\" id=\"product_damaged\">\r\n                <label class=\"form-check-label\" for=\"product_damaged\">\r\n                  Product is damaged.\r\n                </label>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <br />\r\n      `,\r\n        icon: 'success',\r\n        showCancelButton: true,\r\n        cancelButtonColor: 'grey',\r\n        confirmButtonText: 'Submit!',\r\n        confirmButtonColor: 'green',\r\n        allowOutsideClick: false,\r\n        preConfirm: () => ({\r\n          product_expire: (document.getElementById('product_expire').checked) ? document.getElementById('product_expire').value : '',\r\n          product_damaged: (document.getElementById('product_damaged').checked) ? document.getElementById('product_damaged').value : '',\r\n        })\r\n      });\r\n      let v = swalval && swalval.value || swalval.dismiss;\r\n\r\n      if (v.product_expire === '' && v.product_damaged === '') {\r\n        await Swal.fire({ icon: 'error', title: 'Select Reason of Returning!' });\r\n        resetPw();\r\n      } else if (v !== 'cancel') {\r\n        if (swalval.isConfirmed) {\r\n          try {\r\n            axios.get('/sanctum/csrf-cookie').then(response => {\r\n              axios.post('/api/admin/return-order', {\r\n                row_id: row_id,\r\n                product_expire: swalval.value.product_expire,\r\n                product_damaged: swalval.value.product_damaged\r\n              })\r\n                .then(response => {\r\n                  if (response.data.response_code === 200) {\r\n                    var reData = response.data.data;\r\n                    setTableData(tableData.map(item =>\r\n                      item.id === row_id\r\n                        ? reData\r\n                        : item\r\n                    ));\r\n                    swal({\r\n                      title: 'Done!',\r\n                      text: 'Order return request has been send successfully.',\r\n                      icon: 'success'\r\n                    })\r\n                  } else if (response.data.response_code === 412) {\r\n                    swal({\r\n                      title: \"Errors!\",\r\n                      text: response.data.message,\r\n                      icon: \"error\",\r\n                    });\r\n                  } else {\r\n                    swal({\r\n                      title: \"Errors!\",\r\n                      text: response.data.message,\r\n                      icon: \"error\",\r\n                    });\r\n                  }\r\n                  setLoading(false);\r\n                })\r\n                .catch(function (error) {\r\n                  setLoading(false);\r\n                  console.error('inner', error);\r\n                });\r\n            }).catch(function (error) {\r\n              setLoading(false);\r\n              console.error('outer', error);\r\n            });\r\n          } catch (e) {\r\n            console.error('mostouter', e);\r\n            setLoading(false);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    resetPw();\r\n  }\r\n  const __handleAcceptReturn = (row_id, order_id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"You want to accept return of \\\"\" + order_id + \"\\\" order!\",\r\n      icon: \"warning\",\r\n      buttons: [\r\n        'No, cancel it!',\r\n        'Yes, I am sure!'\r\n      ],\r\n      dangerMode: true,\r\n    }).then(function (isConfirm) {\r\n      if (isConfirm) {\r\n        try {\r\n          axios.get('/sanctum/csrf-cookie').then(response => {\r\n            axios.post('/api/admin/update-purchase-order-status', {\r\n              'row_id': row_id,\r\n              'order_status': 'return_initiated',\r\n            })\r\n              .then(response => {\r\n                if (response.data.response_code === 200) {\r\n                  var reData = response.data.data;\r\n                  setTableData(tableData.map(item =>\r\n                    item.id === row_id\r\n                      ? reData\r\n                      : item\r\n                  ));\r\n                  swal({\r\n                    title: 'Done!',\r\n                    text: 'Order return accepted successfully.',\r\n                    icon: 'success'\r\n                  })\r\n                } else if (response.data.response_code === 412) {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                } else {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                }\r\n                setLoading(false);\r\n              })\r\n              .catch(function (error) {\r\n                setLoading(false);\r\n                console.error(error);\r\n              });\r\n          });\r\n        } catch (e) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const __handleReturnRefunded = (row_id, order_id) => {\r\n    swal({\r\n      title: \"Are you sure?\",\r\n      text: \"You want to refund of \\\"\" + order_id + \"\\\" order!\",\r\n      icon: \"warning\",\r\n      buttons: [\r\n        'No, cancel it!',\r\n        'Yes, I am sure!'\r\n      ],\r\n      dangerMode: true,\r\n    }).then(function (isConfirm) {\r\n      if (isConfirm) {\r\n        try {\r\n          axios.get('/sanctum/csrf-cookie').then(response => {\r\n            axios.post('/api/admin/update-purchase-order-status', {\r\n              'row_id': row_id,\r\n              'order_status': 'refund',\r\n            })\r\n              .then(response => {\r\n                if (response.data.response_code === 200) {\r\n                  var reData = response.data.data;\r\n                  setTableData(tableData.map(item =>\r\n                    item.id === row_id\r\n                      ? reData\r\n                      : item\r\n                  ));\r\n                  swal({\r\n                    title: 'Done!',\r\n                    text: 'Order return accepted successfully.',\r\n                    icon: 'success'\r\n                  })\r\n                } else if (response.data.response_code === 412) {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                } else {\r\n                  swal({\r\n                    title: \"Errors!\",\r\n                    text: response.data.message,\r\n                    icon: \"error\",\r\n                  });\r\n                }\r\n                setLoading(false);\r\n              })\r\n              .catch(function (error) {\r\n                setLoading(false);\r\n                console.error(error);\r\n              });\r\n          });\r\n        } catch (e) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  const __handleChangeOrderStatus = (row_id, order_id, status) => {\r\n    var popupHtml = '';\r\n    popupHtml = `<select id=\"order_status\" class=\"swal2-input\"  style=\"width: 80%;\">\r\n      <option value=\"\">Select Order Status</option>\r\n      <option value=\"pending\">Pending</option>\r\n      <option value=\"failed\">Failed</option>\r\n      <option value=\"cancelled\">Cancelled</option>\r\n      <option value=\"completed\">Completed</option>\r\n      <option value=\"processing\">Processing</option>\r\n      <option value=\"ready_to_ship\">Ready To Ship</option>\r\n      <option value=\"shipped\">Shipped</option>\r\n      <option value=\"delivered\">Delivered</option>\r\n      <option value=\"return\">Return</option>\r\n      <option value=\"refund\">Refund</option>\r\n    </select>`;\r\n    if (status === 'ready_to_shipd') {\r\n      popupHtml = `<select id = \"order_status\" class=\"swal2-input\"  style = \"width: 80%;\" >\r\n      <option value=\"\">Select Order Status</option>\r\n      <option value=\"pending\">Pending</option>\r\n      <option value=\"failed\">Failed</option>\r\n      <option value=\"cancelled\">Cancelled</option>\r\n      <option value=\"completed\">Completed</option>\r\n      <option value=\"processing\">Processing</option>\r\n      <option value=\"ready_to_ship\">Ready To Ship</option>\r\n      <option value=\"shipped\">Shipped</option>\r\n      <option value=\"delivered\">Delivered</option>\r\n      <option value=\"return\">Return</option>\r\n      <option value=\"refund\">Refund</option>\r\n    </select >\r\n    <br/>\r\n  <input id=\"tracking_url\" placeholder=\"Tracking Url\" class=\"swal2-input\" style=\"width: 80%;\">`;\r\n    }\r\n    const orderUpdate = async () => {\r\n      const swalval = await Swal.fire({\r\n        title: `Order Id: ${order_id} `,\r\n        focusConfirm: false,\r\n        html: popupHtml,\r\n        icon: 'success',\r\n        showCancelButton: true,\r\n        cancelButtonColor: 'grey',\r\n        confirmButtonText: 'Update!',\r\n        confirmButtonColor: 'green',\r\n        allowOutsideClick: false,\r\n        preConfirm: () => ({\r\n          order_status: document.getElementById('order_status').value,\r\n          tracking_url: document.getElementById('order_status').value,\r\n        })\r\n      });\r\n      let v = swalval && swalval.value || swalval.dismiss;\r\n      if (v && v.order_status || v === 'cancel') {\r\n        if (v.order_status === '') {\r\n          await Swal.fire({ type: 'error', title: 'Order status is required!' });\r\n          orderUpdate();\r\n        } else if (v !== 'cancel') {\r\n          if (swalval.isConfirmed) {\r\n            try {\r\n              axios.get('/sanctum/csrf-cookie').then(response => {\r\n                axios.post('/api/admin/update-purchase-order-status', {\r\n                  'row_id': row_id,\r\n                  'order_status': swalval.value.order_status,\r\n                })\r\n                  .then(response => {\r\n                    if (response.data.response_code === 200) {\r\n                      var reData = response.data.data;\r\n                      setTableData(tableData.map(item =>\r\n                        item.id === row_id\r\n                          ? reData\r\n                          : item\r\n                      ));\r\n                      swal({\r\n                        title: 'Done!',\r\n                        text: response.data.message,\r\n                        icon: 'success'\r\n                      })\r\n                    } else if (response.data.response_code === 412) {\r\n                      swal({\r\n                        title: \"Errors!\",\r\n                        text: response.data.message,\r\n                        icon: \"error\",\r\n                      });\r\n                    } else {\r\n                      swal({\r\n                        title: \"Errors!\",\r\n                        text: response.data.message,\r\n                        icon: \"error\",\r\n                      });\r\n                    }\r\n                    setLoading(false);\r\n                  })\r\n                  .catch(function (error) {\r\n                    setLoading(false);\r\n                    console.error(error);\r\n                  });\r\n              });\r\n            } catch (e) {\r\n              setLoading(false);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        await Swal.fire({ icon: 'error', title: 'Please select order status!' });\r\n        orderUpdate();\r\n      }\r\n    }\r\n    orderUpdate();\r\n  }\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Box className=\"breadcrumb\">\r\n          <Breadcrumb routeSegments={[{ name: \"dashboard\", path: \"/dashboard\" }, { name: \"Purchase\" }]} />\r\n        </Box>\r\n        <Card title=\"Purchase\">\r\n          <CardHeader\r\n            title=\"Purchase\"\r\n            titleTypographyProps={{\r\n              variant: \"h4\",\r\n              fontSize: '16px',\r\n              fontWeight: '600',\r\n              textTransform: 'uppercase',\r\n              textAlign: 'center'\r\n            }}\r\n          />\r\n          <Divider />\r\n          <CardContent>\r\n            <Box width=\"100%\" overflow=\"auto\">\r\n              <StyledTable sx={{ minWidth: 1000 }}>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell align=\"left\" sx={{ width: '60px' }}>Sr. No.</TableCell>\r\n                    <TableCell align=\"center\">Order Id</TableCell>\r\n                    <TableCell align=\"center\">Total MRP</TableCell>\r\n                    <TableCell align=\"center\">Total Saving</TableCell>\r\n                    <TableCell align=\"center\">Total Payable</TableCell>\r\n                    <TableCell align=\"center\">Order Date</TableCell>\r\n                    <TableCell align=\"center\">Transaction Id</TableCell>\r\n                    <TableCell align=\"center\">Payment Status</TableCell>\r\n                    <TableCell align=\"center\">Status</TableCell>\r\n                    <TableCell align=\"center\" sx={{ width: '200px' }}>Action</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {tableData ? tableData\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell align=\"center\">{index + 1}</TableCell>\r\n                        <TableCell align=\"center\">\r\n                          <Link to={`/dashboard/order-history/purchase-details/${row.order_id}`}>\r\n                            {row.hash_order_id}\r\n                          </Link>\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">{row.total_mrp}</TableCell>\r\n                        <TableCell align=\"center\">{row.total_savings}</TableCell>\r\n                        <TableCell align=\"center\">{row.total_payable}</TableCell>\r\n                        <TableCell align=\"center\">{Moment(row.created_at).format('DD/MM/YYYY')}</TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {row.transaction_id ? (\r\n                            <>\r\n                              <Small bgcolor={bgSuccessLight}>{row.transaction_id}</Small>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              {/* <Small bgcolor={bgSuccess}>Pay Now</Small>\r\n                              <br /><br /> */}\r\n                              <Small bgcolor={bgPrimary} onClick={() => __handleUpdateTransactionId(row.id, row.order_id, row.hash_order_id)}>\r\n                                Update Trnx Id\r\n                              </Small>\r\n                            </>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {(() => {\r\n                            switch (row.payment_status) {\r\n                              case 'success':\r\n                                return <Small bgcolor={bgSuccess}>Success</Small>\r\n                              case 'pending':\r\n                                return <Small bgcolor={bgSecondary}>Pending</Small>\r\n                              case 'failed':\r\n                                return <Small bgcolor={bgError}>Failed</Small>\r\n                              default:\r\n                                return null\r\n                            }\r\n                          })()}\r\n                        </TableCell>\r\n                        <TableCell align=\"center\">\r\n                          {(() => {\r\n                            switch (row.status) {\r\n                              case 'pending':\r\n                                return <Small bgcolor={bgSecondary}>Pending</Small>\r\n                              case 'failed':\r\n                                return <Small bgcolor={bgError}>Failed</Small>\r\n                              case 'cancelled':\r\n                                return <Small bgcolor={bgError}>Cancelled</Small>\r\n                              case 'completed':\r\n                                return <Small bgcolor={bgPrimary}>Completed</Small>\r\n                              case 'processing':\r\n                                return <Small bgcolor={bgSuccessLight}>Processing</Small>\r\n                              case 'ready_to_ship':\r\n                                return <Small bgcolor={bgSuccessLight}>Ready To Ship</Small>\r\n                              case 'shipped':\r\n                                return <Small bgcolor={bgSuccessLight}>Shipped</Small>\r\n                              case 'delivered':\r\n                                return <Small bgcolor={bgSuccess}>Delivered</Small>\r\n                              case 'return':\r\n                                return <Small bgcolor={bgSecondaryDark}>Return</Small>\r\n                              case 'return_initiated':\r\n                                return <Small bgcolor={bgSecondaryDark}>Return Initiated</Small>\r\n                              case 'refund':\r\n                                return <Small bgcolor={bgError}>Refunded</Small>\r\n                              default:\r\n                                return null\r\n                            }\r\n                          })()}\r\n                        </TableCell>\r\n                        <TableCell title=\"View\" align=\"right\" sx={{ width: '200px' }}>\r\n\r\n                          {/* <Button title=\"Delete\" onClick={(e) => __handleChangeOrderStatus(row.id, row.order_id, row.status)}\r\n                            color=\"error\" variant=\"outlined\" size=\"small\" sx={{ m: .5 }}>\r\n                            Update Order\r\n                          </Button>\r\n                          <Button title=\"Delete\" onClick={(e) => __handleChangeOrderStatus(row.id, row.order_id)}\r\n                            color=\"error\" variant=\"outlined\" size=\"small\" sx={{ m: .5 }}>\r\n                            Change Status\r\n                          </Button> */}\r\n                          {(() => {\r\n                            switch (row.status) {\r\n                              case 'pending':\r\n                                return <Button title=\"Order Cancel\" onClick={(e) => __handleCancelOrder(row.id, row.hash_order_id)}\r\n                                  color=\"error\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                  Order Cancel\r\n                                </Button>\r\n                              case 'failed':\r\n                                return null\r\n                              case 'cancelled':\r\n                                if (row.payment_status === 'success') {\r\n                                  return <Button title=\"Refund\" onClick={(e) => __handleCancelRefunded(row.id, row.hash_order_id)}\r\n                                    color=\"primary\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                    Refund\r\n                                  </Button>\r\n                                } else {\r\n                                  return null\r\n                                }\r\n                              case 'completed':\r\n                                return < Button title=\"Order Cancel\" onClick={(e) => __handleCancelOrder(row.id, row.hash_order_id)}\r\n                                  color=\"error\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                  Order Cancel\r\n                                </Button>\r\n                              case 'processing':\r\n                                return <Button title=\"Ready To Ship\" onClick={(e) => __handleReadyToShip(row.id, row.hash_order_id)}\r\n                                  color=\"primary\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                  Ready To Ship\r\n                                </Button>\r\n                              case 'ready_to_ship':\r\n                                return <Button title=\"Shipped\" onClick={(e) => __handleOrderShipped(row.id, row.hash_order_id)}\r\n                                  color=\"primary\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                  Shipped\r\n                                </Button>\r\n                              case 'shipped':\r\n                                if (row.tracking_url) {\r\n                                  return <Button title=\"Delivered\" onClick={(e) => __handleOrderDelivered(row.id, row.hash_order_id)}\r\n                                    color=\"success\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                    Delivered\r\n                                  </Button>\r\n                                } else {\r\n                                  return <Button title=\"Shipped\" onClick={(e) => __handleOrderShipped(row.id, row.hash_order_id)}\r\n                                    color=\"primary\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                    Shipped\r\n                                  </Button>\r\n                                }\r\n\r\n                              case 'delivered':\r\n                                if (row.return_valid) {\r\n                                  return <Button title=\"Order Return\" onClick={(e) => __handleReturnOrder(row.id, row.hash_order_id)}\r\n                                    color=\"info\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                    Order Return\r\n                                  </Button>\r\n                                } else {\r\n                                  return null\r\n                                }\r\n                              case 'return':\r\n                                return <Button title=\"Accept Return\" onClick={(e) => __handleAcceptReturn(row.id, row.hash_order_id)}\r\n                                  color=\"primary\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                  Accept Return\r\n                                </Button>\r\n                              case 'return_initiated':\r\n                                return <Button title=\"Return Refunded\" onClick={(e) => __handleReturnRefunded(row.id, row.hash_order_id)}\r\n                                  color=\"primary\" variant=\"contained\" size=\"small\" sx={{ m: .5 }}>\r\n                                  Return Refund\r\n                                </Button>\r\n                              case 'refund':\r\n                                return null\r\n                              default:\r\n                                return null\r\n                            }\r\n                          })()}\r\n                          <Button component={Link}\r\n                            to={`/dashboard/order-history/purchase-detail/${row.id}`}\r\n                            color=\"primary\" variant=\"outlined\" size=\"small\" sx={{ m: .5 }}>\r\n                            View\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    )) : <TableRow><TableCell align=\"center\" colSpan={10}><CircularProgress /></TableCell></TableRow>}\r\n                </TableBody>\r\n              </StyledTable>\r\n              {tableData ?\r\n                <TablePagination\r\n                  sx={{ px: 2 }}\r\n                  page={page}\r\n                  component=\"div\"\r\n                  rowsPerPage={rowsPerPage}\r\n                  count={tableData.length}\r\n                  onPageChange={handleChangePage}\r\n                  rowsPerPageOptions={[5, 10, 25]}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                  nextIconButtonProps={{ \"aria-label\": \"Next Page\" }}\r\n                  backIconButtonProps={{ \"aria-label\": \"Previous Page\" }}\r\n                />\r\n                : <>\r\n\r\n                </>\r\n              }\r\n            </Box>\r\n            <UpdateOrder open={open} setOpen={setOpen} />\r\n          </CardContent>\r\n        </Card>\r\n      </Container >\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default PurchaseList;\r\n"],"sourceRoot":""}