{"version":3,"sources":["../node_modules/@mui/material/ListItemIcon/listItemIconClasses.js","../node_modules/@mui/material/ListItemText/listItemTextClasses.js","../node_modules/@mui/material/MenuItem/menuItemClasses.js","../node_modules/@mui/material/MenuItem/MenuItem.js","../node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@mui/material/internal/svg-icons/CheckBox.js","../node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@mui/material/Checkbox/checkboxClasses.js","../node_modules/@mui/material/Checkbox/Checkbox.js","app/views/admin/users/UpdateUserInfo.js"],"names":["listItemIconClasses","generateUtilityClasses","listItemTextClasses","getMenuItemUtilityClass","slot","generateUtilityClass","menuItemClasses","_excluded","MenuItemRoot","styled","ButtonBase","shouldForwardProp","prop","rootShouldForwardProp","name","overridesResolver","props","styles","ownerState","root","dense","divider","disableGutters","gutters","theme","_extends","typography","body1","display","justifyContent","alignItems","position","textDecoration","minHeight","paddingTop","paddingBottom","boxSizing","whiteSpace","paddingLeft","paddingRight","borderBottom","vars","palette","backgroundClip","backgroundColor","action","hover","selected","primary","mainChannel","selectedOpacity","alpha","main","focusVisible","focusOpacity","hoverOpacity","focus","disabled","opacity","disabledOpacity","dividerClasses","marginTop","spacing","marginBottom","inset","marginLeft","minWidth","breakpoints","up","body2","fontSize","MenuItem","React","inProps","ref","useThemeProps","autoFocus","component","focusVisibleClassName","role","tabIndexProp","tabIndex","other","_objectWithoutPropertiesLoose","context","ListContext","childContext","menuItemRef","useEnhancedEffect","current","classes","slots","composedClasses","composeClasses","useUtilityClasses","handleRef","useForkRef","undefined","_jsx","Provider","value","children","clsx","createSvgIcon","d","getCheckboxUtilityClass","checkboxClasses","CheckboxRoot","SwitchBase","indeterminate","color","capitalize","text","secondary","disableRipple","activeChannel","active","checked","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","Checkbox","_icon$props$fontSize","_indeterminateIcon$pr","checkedIcon","icon","iconProp","indeterminateIcon","indeterminateIconProp","inputProps","size","type","Container","margin","down","ContentBox","Box","height","padding","initialValues","register_as","plan_id","first_name","last_name","email","firm_name","user_name","mobile_no","user_categories","address","pin_code","dl_no_1","dl_no_2","gst_no","fssai_no","account_name","account_no","ifsc_code","branch","state_id","signature","validationSchema","Yup","shape","required","min","max","matches","message","excludeEmptyString","when","is","then","otherwise","UpdateUserInfo","user_id","useParams","useTheme","useNavigate","useState","loading","setLoading","user","setUser","states","setStates","plans","setPlans","categories","setCategory","formData","setFormData","DLOpen","setDLOpen","fssaiOpen","setFssaiOpen","userCategories","setUserCategories","useEffect","fetchData","axios","get","response","post","data","response_code","catch","error","console","selectedUserCat","length","changeHandler","e","target","files","className","routeSegments","path","title","titleTypographyProps","variant","fontWeight","Link","to","sx","m","width","overflow","onSubmit","values","errors","uploadFormData","FormData","iKey","append","headers","swal","setErrors","log","handleFormSubmit","enableReinitialize","touched","handleChange","handleBlur","handleSubmit","container","style","item","sm","xs","htmlFor","fullWidth","onBlur","onChange","helperText","Boolean","mb","lg","maxLength","labelId","id","map","row","state_code","index","control","includes","push","updateUserCat","filter","rowLal","label","defaultValue","src","alt","update_signature","plan_name","mt"],"mappings":"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","file":"static/js/23.e5a41dbe.chunk.js","sourcesContent":["import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getListItemIconUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemIcon', slot);\n}\nconst listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);\nexport default listItemIconClasses;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getListItemTextUtilityClass(slot) {\n  return generateUtilityClass('MuiListItemText', slot);\n}\nconst listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);\nexport default listItemTextClasses;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getMenuItemUtilityClass(slot) {\n  return generateUtilityClass('MuiMenuItem', slot);\n}\nconst menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);\nexport default menuItemClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"autoFocus\", \"component\", \"dense\", \"divider\", \"disableGutters\", \"focusVisibleClassName\", \"role\", \"tabIndex\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport ListContext from '../List/ListContext';\nimport ButtonBase from '../ButtonBase';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useForkRef from '../utils/useForkRef';\nimport { dividerClasses } from '../Divider';\nimport { listItemIconClasses } from '../ListItemIcon';\nimport { listItemTextClasses } from '../ListItemText';\nimport menuItemClasses, { getMenuItemUtilityClass } from './menuItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const overridesResolver = (props, styles) => {\n  const {\n    ownerState\n  } = props;\n  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];\n};\n\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    dense,\n    divider,\n    disableGutters,\n    selected,\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']\n  };\n  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst MenuItemRoot = styled(ButtonBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiMenuItem',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  ownerState\n}) => _extends({}, theme.typography.body1, {\n  display: 'flex',\n  justifyContent: 'flex-start',\n  alignItems: 'center',\n  position: 'relative',\n  textDecoration: 'none',\n  minHeight: 48,\n  paddingTop: 6,\n  paddingBottom: 6,\n  boxSizing: 'border-box',\n  whiteSpace: 'nowrap'\n}, !ownerState.disableGutters && {\n  paddingLeft: 16,\n  paddingRight: 16\n}, ownerState.divider && {\n  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,\n  backgroundClip: 'padding-box'\n}, {\n  '&:hover': {\n    textDecoration: 'none',\n    backgroundColor: (theme.vars || theme).palette.action.hover,\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  },\n  [`&.${menuItemClasses.selected}`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    [`&.${menuItemClasses.focusVisible}`]: {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n    }\n  },\n  [`&.${menuItemClasses.selected}:hover`]: {\n    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n    }\n  },\n  [`&.${menuItemClasses.focusVisible}`]: {\n    backgroundColor: (theme.vars || theme).palette.action.focus\n  },\n  [`&.${menuItemClasses.disabled}`]: {\n    opacity: (theme.vars || theme).palette.action.disabledOpacity\n  },\n  [`& + .${dividerClasses.root}`]: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  [`& + .${dividerClasses.inset}`]: {\n    marginLeft: 52\n  },\n  [`& .${listItemTextClasses.root}`]: {\n    marginTop: 0,\n    marginBottom: 0\n  },\n  [`& .${listItemTextClasses.inset}`]: {\n    paddingLeft: 36\n  },\n  [`& .${listItemIconClasses.root}`]: {\n    minWidth: 36\n  }\n}, !ownerState.dense && {\n  [theme.breakpoints.up('sm')]: {\n    minHeight: 'auto'\n  }\n}, ownerState.dense && _extends({\n  minHeight: 32,\n  // https://material.io/components/menus#specs > Dense\n  paddingTop: 4,\n  paddingBottom: 4\n}, theme.typography.body2, {\n  [`& .${listItemIconClasses.root} svg`]: {\n    fontSize: '1.25rem'\n  }\n})));\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMenuItem'\n  });\n\n  const {\n    autoFocus = false,\n    component = 'li',\n    dense = false,\n    divider = false,\n    disableGutters = false,\n    focusVisibleClassName,\n    role = 'menuitem',\n    tabIndex: tabIndexProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const context = React.useContext(ListContext);\n  const childContext = {\n    dense: dense || context.dense || false,\n    disableGutters\n  };\n  const menuItemRef = React.useRef(null);\n  useEnhancedEffect(() => {\n    if (autoFocus) {\n      if (menuItemRef.current) {\n        menuItemRef.current.focus();\n      } else if (process.env.NODE_ENV !== 'production') {\n        console.error('MUI: Unable to set focus to a MenuItem whose component has not been rendered.');\n      }\n    }\n  }, [autoFocus]);\n\n  const ownerState = _extends({}, props, {\n    dense: childContext.dense,\n    divider,\n    disableGutters\n  });\n\n  const classes = useUtilityClasses(props);\n  const handleRef = useForkRef(menuItemRef, ref);\n  let tabIndex;\n\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n\n  return /*#__PURE__*/_jsx(ListContext.Provider, {\n    value: childContext,\n    children: /*#__PURE__*/_jsx(MenuItemRoot, _extends({\n      ref: handleRef,\n      role: role,\n      tabIndex: tabIndex,\n      component: component,\n      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName)\n    }, other, {\n      ownerState: ownerState,\n      classes: classes\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent Menu component.\n   * @default false\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * If `true`, a 1px light border is added to the bottom of the menu item.\n   * @default false\n   */\n  divider: PropTypes.bool,\n\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  role: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .string,\n\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * @default 0\n   */\n  tabIndex: PropTypes.number\n} : void 0;\nexport default MenuItem;","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCheckboxUtilityClass(slot) {\n  return generateUtilityClass('MuiCheckbox', slot);\n}\nconst checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary']);\nexport default checkboxClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checkedIcon\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport checkboxClasses, { getCheckboxUtilityClass } from './checkboxClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    indeterminate,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`]\n  };\n  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);\n  return _extends({}, classes, composedClasses);\n};\n\nconst CheckboxRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiCheckbox',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.indeterminate && styles.indeterminate, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${checkboxClasses.checked}, &.${checkboxClasses.indeterminate}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${checkboxClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\n\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(CheckBoxIcon, {});\n\nconst defaultIcon = /*#__PURE__*/_jsx(CheckBoxOutlineBlankIcon, {});\n\nconst defaultIndeterminateIcon = /*#__PURE__*/_jsx(IndeterminateCheckBoxIcon, {});\n\nconst Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(inProps, ref) {\n  var _icon$props$fontSize, _indeterminateIcon$pr;\n\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCheckbox'\n  });\n\n  const {\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon: iconProp = defaultIcon,\n    indeterminate = false,\n    indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,\n    inputProps,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const icon = indeterminate ? indeterminateIconProp : iconProp;\n  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;\n\n  const ownerState = _extends({}, props, {\n    color,\n    indeterminate,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CheckboxRoot, _extends({\n    type: \"checkbox\",\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {\n      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size\n    }),\n    ownerState: ownerState,\n    ref: ref\n  }, other, {\n    classes: classes\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Checkbox;","import { useState, useEffect } from \"react\";\r\nimport { Link, useParams, NavLink, useNavigate } from 'react-router-dom';\r\nimport { Breadcrumb, SimpleCard } from \"app/components\";\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { Formik, Form, Field, FieldArray } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport axios from 'axios';\r\nimport swal from 'sweetalert';\r\nimport {\r\n  Card, CardContent, CardHeader,\r\n  Divider,\r\n  Box,\r\n  Grid,\r\n  Button,\r\n  styled,\r\n  TextField,\r\n  useTheme,\r\n  RadioGroup, FormControlLabel, Radio,\r\n  FormControl, Select, MenuItem,\r\n  FormGroup, Checkbox\r\n\r\n} from \"@mui/material\";\r\n\r\n\r\nconst Container = styled(\"div\")(({ theme }) => (\r\n  {\r\n    margin: \"30px\",\r\n    [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\r\n    \"& .breadcrumb\": {\r\n      marginBottom: \"30px\",\r\n      [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\r\n    },\r\n  }\r\n));\r\n\r\nconst ContentBox = styled(Box)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  position: 'relative',\r\n  // background: 'rgba(0, 0, 0, 0.01)',\r\n}));\r\n\r\n// inital login credentials\r\nconst initialValues = {\r\n  register_as: 'M',\r\n  plan_id: '1',\r\n  first_name: '',\r\n  last_name: '',\r\n  email: '',\r\n  firm_name: '',\r\n  user_name: '',\r\n  mobile_no: '',\r\n  user_categories: [],\r\n  address: '',\r\n  pin_code: '',\r\n  dl_no_1: '',\r\n  dl_no_2: '',\r\n  gst_no: '',\r\n  fssai_no: '',\r\n  account_name: '',\r\n  account_no: '',\r\n  ifsc_code: '',\r\n  branch: '',\r\n  state_id: '1',\r\n  signature: '',\r\n};\r\n// form field validation schema\r\n// .matches(/(\\+91\\ )[6-9]{1}[0-9 ]{4}[0-9 ]{4}[0-9]{3}/, {\r\nconst validationSchema = Yup.object().shape({\r\n  first_name: Yup.string()\r\n    .required('First Name is required!'),\r\n  last_name: Yup.string()\r\n    .required('Last Name is required!'),\r\n  firm_name: Yup.string()\r\n    .required('Firm Name is required!'),\r\n  gst_no: Yup.string()\r\n    .min(15, 'GST number must be 15 digit length!')\r\n    .max(15, 'GST number must be 15 digit length!')\r\n    .matches(/^([0-9]{2}[a-zA-Z]{4}([a-zA-Z]{1}|[0-9]{1})[0-9]{4}[a-zA-Z]{1}([a-zA-Z]|[0-9]){3}){0,15}$/, { message: \"Please enter valid GST number.\", excludeEmptyString: false }),\r\n  mobile_no: Yup.string()\r\n    .required('Mobile number is required!')\r\n    .min(10, 'Mobile number must be 10 digit length!')\r\n    .max(10, 'Mobile number must be 10 digit length!')\r\n    .matches(/^[6-9]\\d{9}$/, { message: \"Please enter valid mobile number!\", excludeEmptyString: false }),\r\n  address: Yup.string()\r\n    .required('Address is required!'),\r\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\r\n  address: Yup.string()\r\n    .required('Address is required!'),\r\n  state_id: Yup.string()\r\n    .required('State is required!'),\r\n  pin_code: Yup.string()\r\n    .min(6, \"Pin Code must be 6 digit!\")\r\n    .max(6, \"Pin Code must be 6 digit!\")\r\n    .required('Pin Code is required!'),\r\n  // user_categories: Yup\r\n  //   .string()\r\n  //   .required(\"Select at least one category\"),\r\n  account_name: Yup.string().when('register_as', {\r\n    is: (register_as) => register_as == 'M' || register_as == 'D' || register_as == 'W',\r\n    then: Yup.string().required('Account Name is required!'),\r\n    otherwise: Yup.string(),\r\n  }),\r\n  account_no: Yup.string().when('register_as', {\r\n    is: (register_as) => register_as === 'M' || register_as === 'D' || register_as === 'W',\r\n    then: Yup.string()\r\n      .min(10, \"Account Number must be 10 to 16 digit!\")\r\n      .max(16, \"Account Number must be 10 to 16 digit!\")\r\n      .required('Account Number is required!'),\r\n    otherwise: Yup.string(),\r\n  }),\r\n  ifsc_code: Yup.string().when('register_as', {\r\n    is: (register_as) => register_as === 'M' || register_as === 'D' || register_as === 'W',\r\n    then: Yup.string()\r\n      .min(8, \"IFSC Code must be 8 to 13 alphanumeric!\")\r\n      .max(13, \"IFSC Code must be 8 to 13 alphanumeric!\")\r\n      .required('IFSC Code is required!'),\r\n    otherwise: Yup.string(),\r\n  }),\r\n  branch: Yup.string().when('register_as', {\r\n    is: (register_as) => register_as === 'M' || register_as === 'D' || register_as === 'W',\r\n    then: Yup.string()\r\n      .min(3, \"Branch must be 3 charectors!\")\r\n      .required('Branch is required!'),\r\n    otherwise: Yup.string(),\r\n  }),\r\n\r\n});\r\n\r\nconst UpdateUserInfo = () => {\r\n\r\n  const { user_id } = useParams();\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [user, setUser] = useState(initialValues);\r\n  const [states, setStates] = useState(false);\r\n  const [plans, setPlans] = useState(false);\r\n  const [categories, setCategory] = useState(false);\r\n  const [formData, setFormData] = useState(initialValues);\r\n\r\n  const [DLOpen, setDLOpen] = useState(false);\r\n  const [fssaiOpen, setFssaiOpen] = useState(false);\r\n  const [userCategories, setUserCategories] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  /**\r\n   * Fetching data from server.\r\n   */\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await axios.get('/sanctum/csrf-cookie').then(response => {\r\n        axios.post('/api/client/get-states')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setStates(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n        axios.post('/api/client/get-medicine-categories')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setCategory(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n\r\n        axios.post('/api/client/get-plans')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setPlans(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n\r\n        axios.post('/api/admin/get-user-info', { user_id: user_id })\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setFormData(response.data.data);\r\n              setUser(response.data.data);\r\n              setUserCategories(response.data.data.user_categories);\r\n              var selectedUserCat = response.data.data.user_categories;\r\n              // Set Default Cat Option\r\n              if (selectedUserCat.length == 1) {\r\n                if (selectedUserCat[0] == 5) {\r\n                  setDLOpen(false);\r\n                  setFssaiOpen(false);\r\n                } else if (selectedUserCat[0] == 4) {\r\n                  setDLOpen(false);\r\n                  setFssaiOpen(true);\r\n                } else {\r\n                  setDLOpen(true);\r\n                  setFssaiOpen(true);\r\n                }\r\n              } else if (selectedUserCat.length) {\r\n                setDLOpen(true);\r\n                setFssaiOpen(true);\r\n              } else {\r\n                setDLOpen(false);\r\n                setFssaiOpen(false);\r\n              }\r\n\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            } else {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n      });\r\n    } catch (e) {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    console.log(e.target.name + '-' + e.target.value);\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    console.log(formData);\r\n  };\r\n\r\n  const changeHandler = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.files[0] });\r\n  };\r\n\r\n  const handleFormSubmit = (values, errors) => {\r\n    try {\r\n      axios.get('/sanctum/csrf-cookie').then(response => {\r\n        const uploadFormData = new FormData();\r\n        uploadFormData.append(user_id, user_id)\r\n        for (let iKey in values) {\r\n          if (iKey === 'update_signature' || iKey === 'user_categories') {\r\n            uploadFormData.append(iKey, formData[iKey])\r\n            // for (let file of formData[iKey]) {\r\n            //   uploadFormData.append('picture', file);\r\n            // }\r\n          } else {\r\n            uploadFormData.append(iKey, values[iKey])\r\n          }\r\n\r\n        }\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n        axios.post('/api/admin/save-updated-info', uploadFormData, config)\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              swal({\r\n                title: \"Good job!\",\r\n                text: response.data.message,\r\n                icon: \"success\",\r\n              });\r\n              // navigate('/');\r\n            } else {\r\n              swal({\r\n                title: \"Warning!\",\r\n                text: response.data.message,\r\n                icon: \"warning\",\r\n              });\r\n              errors.setErrors(response.data.errors);\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            console.error(error);\r\n          });\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Box className=\"breadcrumb\">\r\n          <Breadcrumb routeSegments={[{ name: \"dashboard\", path: \"/dashboard\" }, { name: \"Update Profile\" }]} />\r\n        </Box>\r\n\r\n        <Card title=\"Update Profile\">\r\n          <ContentBox>\r\n            <CardHeader\r\n              title=\"Update Profile\"\r\n              titleTypographyProps={{\r\n                variant: \"h4\",\r\n                fontSize: '18px',\r\n                fontWeight: '600',\r\n                // textTransform: 'uppercase',\r\n                color: theme.palette.primary.main\r\n              }}\r\n              action={\r\n                <>\r\n                  <Button title=\"Edit\" component={Link}\r\n                    to={`/dashboard/profile/edit`}\r\n                    color=\"info\" variant=\"outlined\" size=\"small\" sx={{ m: .5 }}>\r\n                    Edit\r\n                  </Button>\r\n                  <Button title=\"Back\" component={Link}\r\n                    to={`/dashboard`}\r\n                    color=\"primary\" variant=\"outlined\" size=\"small\" sx={{ m: .5 }}>\r\n                    Back\r\n                  </Button>\r\n                </>\r\n              }\r\n            />\r\n            <Divider />\r\n            <CardContent>\r\n              <Box width=\"100%\" overflow=\"auto\">\r\n                {user && (\r\n                  <>\r\n                    <Formik\r\n                      onSubmit={(values, errors) => {\r\n                        handleFormSubmit(values, errors);\r\n                      }\r\n                      }\r\n                      enableReinitialize={true}\r\n                      initialValues={user}\r\n                      validationSchema={validationSchema}\r\n                    >\r\n                      {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                          <Grid container style={{ padding: '20px' }} spacing={2}>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"first_name\" className='form-label'>First Name</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"text\"\r\n                                name=\"first_name\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.first_name}\r\n                                onChange={handleChange}\r\n                                helperText={touched.first_name && errors.first_name}\r\n                                error={Boolean(errors.first_name && touched.first_name)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"last_name\" className='form-label'>Last Name</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"text\"\r\n                                name=\"last_name\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.last_name}\r\n                                onChange={handleChange}\r\n                                helperText={touched.last_name && errors.last_name}\r\n                                error={Boolean(errors.last_name && touched.last_name)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12} lg={12}>\r\n                              <label htmlFor=\"firm_name\" className='form-label'>Firm Name</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"text\"\r\n                                name=\"firm_name\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.firm_name}\r\n                                onChange={handleChange}\r\n                                helperText={touched.firm_name && errors.firm_name}\r\n                                error={Boolean(errors.firm_name && touched.firm_name)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"email\" className='form-label'>Email ID</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                helperText={touched.email && errors.email}\r\n                                error={Boolean(errors.email && touched.email)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"mobile_no\" className='form-label'>Mobile No.</label>\r\n                              {/* <PhoneInput\r\n                        country={\"in\"}\r\n                        value={values.mobile_no}\r\n                        name=\"mobile_no\"\r\n                        onChange={handleChange}\r\n                        onBlur={(e) => handleBlur(e)}\r\n                        defaultMask=\".... ... ...\"\r\n                        masks={{ in: \"..........\" }}\r\n                        onlyCountries={[\"in\"]}\r\n                        inputProps={{\r\n                          name: \"mobile_no\",\r\n                          required: true,\r\n                        }}\r\n                        disableSearchIcon={true}\r\n                        disableDropdown={true}\r\n                        containerClass=\"h-12 text-sm focus:outline-none block w-full bg-gray-100 dark:bg-transparent border-transparent focus:bg-white\"\r\n\r\n                        // containerClass=\"h-12 text-sm focus:outline-none block w-full bg-gray-100 dark:bg-transparent border-transparent focus:bg-white\"\r\n                        inputClass=\"border h-12 text-sm focus:outline-none block w-full bg-gray-100 dark:bg-transparent border-transparent focus:bg-white\"\r\n                        inputStyle={{\r\n                          background: \"transparent\",\r\n                          // border: \"1px solid grey\",\r\n                          height: \"2.70em\",\r\n                          width: \"100%\",\r\n                          outline: \"none\",\r\n\r\n                        }}\r\n                        buttonStyle={{\r\n                          // height: \"3em\",\r\n                          // background: \"transparent\",\r\n                          // outline: \"none\",\r\n                          // border: \"none\",\r\n                        }}\r\n                        style={{ marginBottom: \"22px\" }}\r\n                      /> */}\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                name=\"mobile_no\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.mobile_no}\r\n                                onChange={handleChange}\r\n                                helperText={touched.mobile_no && errors.mobile_no}\r\n                                error={Boolean(errors.mobile_no && touched.mobile_no)}\r\n                                sx={{ mb: 3 }}\r\n                                inputProps={\r\n                                  { maxLength: 10 }\r\n                                }\r\n                              />\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"address\" className='form-label'>Address</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"text\"\r\n                                name=\"address\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.address}\r\n                                onChange={handleChange}\r\n                                helperText={touched.address && errors.address}\r\n                                error={Boolean(errors.address && touched.address)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"state_id\" className='form-label'>State</label>\r\n                              <FormControl fullWidth\r\n                                sx={{ mb: 3 }}\r\n                                size=\"small\"\r\n                              >\r\n                                <Select\r\n                                  labelId=\"state-label\"\r\n                                  id=\"brand_id\"\r\n                                  name=\"state_id\"\r\n                                  // label=\"Select States\"\r\n                                  value={values.state_id}\r\n                                  onChange={handleChange}\r\n                                  variant=\"outlined\"\r\n                                  onBlur={handleBlur}\r\n                                  // defaultValue={values.state_id.toString()}\r\n                                  error={Boolean(errors.state_id && touched.state_id)}\r\n                                >\r\n                                  <MenuItem value=\"\" key=\"sg\">Select State</MenuItem>\r\n                                  {states && states.map((row) =>\r\n                                    <MenuItem value={row.id} key={row.id}>{row.name} ({row.state_code})</MenuItem>\r\n                                  )}\r\n                                </Select>\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"pin_code\" className='form-label'>Pin Code</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"number\"\r\n                                name=\"pin_code\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.pin_code}\r\n                                onChange={handleChange}\r\n                                helperText={touched.pin_code && errors.pin_code}\r\n                                error={Boolean(errors.pin_code && touched.pin_code)}\r\n                                sx={{ mb: 3 }}\r\n                                inputProps={{ min: 6 }}\r\n                              />\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"gst_no\" className='form-label'>GST No</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"text\"\r\n                                name=\"gst_no\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.gst_no}\r\n                                onChange={handleChange}\r\n                                helperText={touched.gst_no && errors.gst_no}\r\n                                error={Boolean(errors.gst_no && touched.gst_no)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n                          <Grid container style={{ padding: '0px 20px' }} spacing={2}>\r\n                            <Grid item sm={12} xs={12} lg={12}>\r\n                              <h3 style={{ marginLeft: 0, fontSize: '17px' }}>Categories</h3>\r\n                            </Grid>\r\n                            <FormControl sx={{ mb: 3 }} component=\"fieldset\" variant=\"standard\" style={{ padding: \"0px 0px 0px 16px\" }}>\r\n                              <FormGroup row={true}>\r\n                                {categories ? categories\r\n                                  .map((row, index) => (\r\n                                    <Grid item sm={6} xs={12} lg={4} key={index}>\r\n                                      <FormControlLabel\r\n                                        control={\r\n                                          <Checkbox\r\n                                            checked={userCategories.includes(row.id)}\r\n                                            name={`user_categories[${row.id}]`}\r\n                                            value={row.id}\r\n                                            onChange={e => {\r\n                                              if (e.target.checked) {\r\n                                                userCategories.push(row.id);\r\n                                                console.log(userCategories);\r\n                                                setFormData({ ...formData, ['user_categories']: userCategories });\r\n                                                console.log(userCategories[0]);\r\n                                                if (userCategories.length == 1) {\r\n                                                  if (userCategories[0] == 5) {\r\n                                                    setDLOpen(false);\r\n                                                    setFssaiOpen(false);\r\n                                                  } else if (userCategories[0] == 4) {\r\n                                                    setDLOpen(false);\r\n                                                    setFssaiOpen(true);\r\n                                                  } else {\r\n                                                    setDLOpen(true);\r\n                                                    setFssaiOpen(true);\r\n                                                  }\r\n                                                } else if (userCategories.length) {\r\n                                                  setDLOpen(true);\r\n                                                  setFssaiOpen(true);\r\n                                                } else {\r\n                                                  setDLOpen(false);\r\n                                                  setFssaiOpen(false);\r\n                                                }\r\n                                              } else {\r\n                                                const updateUserCat = formData.user_categories.filter((rowLal) => rowLal !== (row.id));\r\n                                                setUserCategories(updateUserCat);\r\n                                                setFormData({ ...formData, ['user_categories']: updateUserCat });\r\n                                                console.log(updateUserCat[0]);\r\n                                                if (updateUserCat.length == 1) {\r\n                                                  if (updateUserCat[0] == 5) {\r\n                                                    setDLOpen(false);\r\n                                                    setFssaiOpen(false);\r\n                                                  } else if (updateUserCat[0] == 4) {\r\n                                                    setDLOpen(false);\r\n                                                    setFssaiOpen(true);\r\n                                                  } else {\r\n                                                    setDLOpen(true);\r\n                                                    setFssaiOpen(true);\r\n                                                  }\r\n                                                } else if (updateUserCat.length) {\r\n                                                  setDLOpen(true);\r\n                                                  setFssaiOpen(true);\r\n                                                } else {\r\n                                                  setDLOpen(false);\r\n                                                  setFssaiOpen(false);\r\n                                                }\r\n                                              }\r\n                                            }}\r\n                                          />\r\n                                        }\r\n                                        label={row.name}\r\n                                      />\r\n\r\n                                    </Grid>\r\n                                  )) : <></>}\r\n                              </FormGroup>\r\n\r\n                              {/* {(!formData.user_categories.length) && (errors.user_categories)\r\n                                && (touched.user_categories)\r\n                                && <div style={{ color: '#ff3d57' }}>{`${errors.user_categories}`}</div>} */}\r\n                            </FormControl>\r\n                          </Grid>\r\n                          {DLOpen && (\r\n                            <Grid container style={{ padding: '0px 20px' }} spacing={2}>\r\n                              <Grid item sm={6} xs={12}>\r\n                                <label htmlFor=\"dl_no_1\" className='form-label'>DL NO 1</label>\r\n                                <TextField\r\n                                  fullWidth\r\n                                  size=\"small\"\r\n                                  type=\"text\"\r\n                                  name=\"dl_no_1\"\r\n                                  // label=\"Name\"\r\n                                  variant=\"outlined\"\r\n                                  onBlur={handleBlur}\r\n                                  value={values.dl_no_1}\r\n                                  onChange={handleChange}\r\n                                  helperText={touched.dl_no_1 && errors.dl_no_1}\r\n                                  error={Boolean(errors.dl_no_1 && touched.dl_no_1)}\r\n                                  sx={{ mb: 3 }}\r\n                                />\r\n                              </Grid>\r\n                              <Grid item sm={6} xs={12}>\r\n                                <label htmlFor=\"dl_no_2\" className='form-label'>DL NO 2</label>\r\n                                <TextField\r\n                                  fullWidth\r\n                                  size=\"small\"\r\n                                  type=\"text\"\r\n                                  name=\"dl_no_2\"\r\n                                  // label=\"Name\"\r\n                                  variant=\"outlined\"\r\n                                  onBlur={handleBlur}\r\n                                  value={values.dl_no_2}\r\n                                  onChange={handleChange}\r\n                                  helperText={touched.dl_no_2 && errors.dl_no_2}\r\n                                  error={Boolean(errors.dl_no_2 && touched.dl_no_2)}\r\n                                  sx={{ mb: 3 }}\r\n                                />\r\n                              </Grid>\r\n                            </Grid>\r\n                          )}\r\n                          {fssaiOpen && (<Grid container style={{ padding: '0px 20px' }} spacing={2}>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"fssai_no\" className='form-label'>FSSAI No</label>\r\n                              <TextField\r\n                                fullWidth\r\n                                size=\"small\"\r\n                                type=\"text\"\r\n                                name=\"fssai_no\"\r\n                                // label=\"Name\"\r\n                                variant=\"outlined\"\r\n                                onBlur={handleBlur}\r\n                                value={values.fssai_no}\r\n                                onChange={handleChange}\r\n                                helperText={touched.fssai_no && errors.fssai_no}\r\n                                error={Boolean(errors.fssai_no && touched.fssai_no)}\r\n                                sx={{ mb: 3 }}\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n                          )}\r\n                          <Grid container style={{ padding: '0px 20px' }} spacing={2}>\r\n                            <Grid item sm={6} xs={12} lg={12}>\r\n                              <label htmlFor=\"last_name\" className='form-label'>Register As</label>\r\n                              <RadioGroup\r\n                                row\r\n                                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                defaultValue=\"M\"\r\n                                name=\"register_as\"\r\n                                sx={{ mb: 2 }}\r\n                                value={values.register_as}\r\n                                onChange={handleChange}\r\n                              >\r\n                                <FormControlLabel value=\"M\" control={<Radio />} label=\"Manufacturer\" />\r\n                                <FormControlLabel value=\"D\" control={<Radio />} label=\"Distributor\" />\r\n                                <FormControlLabel value=\"W\" control={<Radio />} label=\"Wholesaler\" />\r\n                                <FormControlLabel value=\"R\" control={<Radio />} label=\"Retailer\" />\r\n                                <FormControlLabel value=\"H\" control={<Radio />} label=\"Hospital\" />\r\n                              </RadioGroup>\r\n                            </Grid>\r\n                            {(values.register_as == 'M' || values.register_as == 'D' || values.register_as == 'W') ? (\r\n                              <>\r\n                                <Grid item sm={12} xs={12} lg={12} style={{ paddingTop: \"10px\" }}>\r\n                                  <h3 style={{ color: theme.palette.primary.main, marginLeft: 0, fontSize: '17px' }}>Bank Details</h3>\r\n                                </Grid>\r\n                                <Grid item sm={6} xs={12}>\r\n                                  <label htmlFor=\"account_name\" className='form-label'>Account Name</label>\r\n                                  <TextField\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    type=\"text\"\r\n                                    name=\"account_name\"\r\n                                    // label=\"Name\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={handleBlur}\r\n                                    value={values.account_name}\r\n                                    onChange={handleChange}\r\n                                    helperText={touched.account_name && errors.account_name}\r\n                                    error={Boolean(errors.account_name && touched.account_name)}\r\n                                    sx={{ mb: 3 }}\r\n                                  />\r\n                                </Grid>\r\n                                <Grid item sm={6} xs={12}>\r\n                                  <label htmlFor=\"account_no\" className='form-label'>Account No</label>\r\n                                  <TextField\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    type=\"number\"\r\n                                    name=\"account_no\"\r\n                                    // label=\"Name\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={handleBlur}\r\n                                    value={values.account_no}\r\n                                    onChange={handleChange}\r\n                                    helperText={touched.account_no && errors.account_no}\r\n                                    error={Boolean(errors.account_no && touched.account_no)}\r\n                                    sx={{ mb: 3 }}\r\n                                  />\r\n                                </Grid>\r\n                                <Grid item sm={6} xs={12}>\r\n                                  <label htmlFor=\"ifsc_code\" className='form-label'>IFSC Code</label>\r\n                                  <TextField\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    type=\"text\"\r\n                                    name=\"ifsc_code\"\r\n                                    // label=\"Name\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={handleBlur}\r\n                                    value={values.ifsc_code}\r\n                                    onChange={handleChange}\r\n                                    helperText={touched.ifsc_code && errors.ifsc_code}\r\n                                    error={Boolean(errors.ifsc_code && touched.ifsc_code)}\r\n                                    sx={{ mb: 3 }}\r\n                                  />\r\n                                </Grid>\r\n                                <Grid item sm={6} xs={12}>\r\n                                  <label htmlFor=\"branch\" className='form-label'>Branch</label>\r\n                                  <TextField\r\n                                    fullWidth\r\n                                    size=\"small\"\r\n                                    type=\"text\"\r\n                                    name=\"branch\"\r\n                                    // label=\"Name\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={handleBlur}\r\n                                    value={values.branch}\r\n                                    onChange={handleChange}\r\n                                    helperText={touched.branch && errors.branch}\r\n                                    error={Boolean(errors.branch && touched.branch)}\r\n                                    sx={{ mb: 3 }}\r\n                                  />\r\n                                </Grid>\r\n                                <Grid item sm={6} xs={12}>\r\n                                  <label htmlFor=\"first_name\" className='form-label'>Upload Signature</label>\r\n                                  {values.signature && (\r\n                                    <>\r\n                                      <br />\r\n                                      <img src={values.signature} style={{ width: '100px' }} alt=\"Signature\" />\r\n                                      <br />\r\n                                    </>\r\n                                  )}\r\n                                  <FormControl fullWidth={true} sx={{ mb: 3 }}>\r\n                                    <input\r\n                                      id=\"upload-photo\"\r\n                                      name=\"update_signature\"\r\n                                      type=\"file\"\r\n                                      onChange={changeHandler}\r\n                                    />\r\n                                  </FormControl>\r\n                                  {(errors.update_signature)\r\n                                    && (touched.update_signature)\r\n                                    && <div style={{ color: '#ff3d57' }}>{`${errors.update_signature}`}</div>}\r\n                                </Grid>\r\n                              </>\r\n                            )\r\n                              : <></>}\r\n                          </Grid>\r\n                          <Grid container style={{ padding: '30px 20px 0px' }} spacing={4}>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <label htmlFor=\"plan_id\" className='form-label'>Plan</label>\r\n                              <FormControl fullWidth\r\n                                sx={{ mb: 3 }}\r\n                                size=\"small\"\r\n                              >\r\n                                <Select\r\n                                  labelId=\"status-label\"\r\n                                  id=\"plan_id\"\r\n                                  name=\"plan_id\"\r\n                                  value={values.plan_id}\r\n                                  onChange={handleChange}\r\n                                  variant=\"outlined\"\r\n                                  onBlur={handleBlur}\r\n                                  error={Boolean(errors.plan_id && touched.plan_id)}\r\n                                >\r\n                                  <MenuItem value=\"\" key=\"sg\">Select Plan</MenuItem>\r\n                                  {plans && plans.map((row) =>\r\n                                    <MenuItem value={row.id} key={row.id}>{row.plan_name}</MenuItem>\r\n                                  )}\r\n                                </Select>\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item sm={6} xs={12}>\r\n                              <LoadingButton\r\n                                fullWidth\r\n                                type=\"submit\"\r\n                                color=\"primary\"\r\n                                loading={loading}\r\n                                variant=\"contained\"\r\n                                sx={{ mb: 2, mt: 3 }}\r\n                              >\r\n                                Update\r\n                              </LoadingButton>\r\n                            </Grid>\r\n                          </Grid>\r\n                          <br />\r\n                        </form>\r\n                      )}\r\n                    </Formik>\r\n\r\n                    {/* {user.userCategories ? user.userCategories\r\n                      .map((row, index) => (\r\n                        <Grid container spacing={2} key={'1_gc_' + (1 + index)}>\r\n                          <Grid item sm={6} xs={12} lg={3} key={'1_g_' + (1 + index)}>\r\n                            <Item key={'1_gi_' + (1 + index)}>Category Name</Item>\r\n                            <ItemContent key={'1_gic_' + (1 + index)}>\r\n                              {user.userCategories[index].medicine_category}\r\n                            </ItemContent>\r\n                          </Grid>\r\n                          <Grid item sm={6} xs={12} lg={3} key={'2_g_' + (1 + index)}>\r\n                            <Item key={'2_gi_' + (1 + index)}>Commission %</Item>\r\n                            <ItemContent key={'2_gic_' + (1 + index)}>\r\n                              {user.userCategories[index].commission}\r\n                            </ItemContent>\r\n                          </Grid>\r\n                          <Grid item sm={6} xs={12} lg={3} key={'3_g_' + (1 + index)}>\r\n                            <Item key={'3_gi_' + (1 + index)}>Default Commission %</Item>\r\n                            <ItemContent key={'3_gic_' + (1 + index)}>\r\n                              {user.userCategories[index].default_commission} %\r\n                            </ItemContent>\r\n                          </Grid>\r\n                        </Grid>\r\n                      )) : <></>} */}\r\n\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </CardContent>\r\n          </ContentBox>\r\n        </Card>\r\n\r\n      </Container>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default UpdateUserInfo;\r\n"],"sourceRoot":""}