{"version":3,"sources":["app/views/dashboard/medicine/EditMedicinesStock.js"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","Container","height","padding","background","theme","margin","breakpoints","down","marginBottom","TaxCategoryTable","Table","minWidth","whiteSpace","width","borderRadius","boxShadow","borderBottom","paddingLeft","initialValues","product_name","description","category_id","brand_name","unit_packing","expiry_date","available_qty","hsn_sac_code","batch_no","mrp","product_image","min_qty","min_qty_discount","min_qty_bonus_deal","min_qty_trade_rate","min_qty_net_rate","min_qty_margin_percentage","status","tax_category_id","validationSchema","Yup","shape","min","required","AddMedicinesStock","row_id","useParams","useTheme","navigate","useAuth","register","useNavigate","useState","loading","setLoading","categories","setCategory","brands","setBrands","tax_categories","setTaxCategories","product","setProduct","formData","setFormData","useEffect","fetchData","axios","get","then","response","post","data","response_code","catch","error","console","calculateNetRate","e","values","igst","cess","target","name","parseInt","value","min_qty_trade_ratep","amount_without_tax","qty_trade_rate","dealType","Number","isInteger","replace","split","log","length","deal_x","deal_y","amount_after_deal_pre","total_tax_pre","parseFloat","changeHandler","files","className","routeSegments","path","title","titleTypographyProps","variant","fontSize","fontWeight","textTransform","textAlign","action","component","Link","to","color","size","sx","m","onSubmit","errors","uploadFormData","FormData","iKey","append","headers","swal","text","message","icon","setErrors","handleFormSubmit","enableReinitialize","touched","handleChange","handleBlur","handleSubmit","setFieldValue","container","style","spacing","item","sm","xs","htmlFor","fullWidth","type","onBlur","onChange","helperText","Boolean","mb","labelId","id","map","row","freeSolo","options","option","renderInput","params","lg","multiline","minRows","toFixed","disabled","palette","primary","main","overflow","tax","index","checked","inputProps","cgst","sgst","src","float","mt"],"mappings":"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","file":"static/js/12.8987144a.chunk.js","sourcesContent":["import { useTheme } from '@emotion/react';\r\nimport { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams, Link } from 'react-router-dom';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport {\r\n  Card, CardHeader, CardContent, Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Divider,\r\n  InputLabel, Select, MenuItem,\r\n  Grid, TextField, Radio, FormControl,\r\n  Autocomplete\r\n}\r\n  from '@mui/material';\r\nimport { Box, styled } from '@mui/system';\r\nimport { Formik } from 'formik';\r\nimport useAuth from 'app/hooks/useAuth';\r\n\r\nimport axios from 'axios';\r\nimport * as Yup from 'yup';\r\nimport swal from 'sweetalert';\r\nimport { Breadcrumb } from \"app/components\";\r\n\r\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n  height: '100%',\r\n  padding: '32px',\r\n  background: 'rgba(0, 0, 0, 0.01)',\r\n}));\r\n\r\nconst Container = styled(\"div\")(({ theme }) => (\r\n  {\r\n    margin: \"30px\",\r\n    [theme.breakpoints.down(\"sm\")]: { margin: \"16px\" },\r\n    \"& .breadcrumb\": {\r\n      marginBottom: \"30px\",\r\n      [theme.breakpoints.down(\"sm\")]: { marginBottom: \"16px\" },\r\n    },\r\n  }\r\n));\r\n\r\nconst TaxCategoryTable = styled(Table)(() => ({\r\n  minWidth: 400,\r\n  whiteSpace: 'pre',\r\n  '& small': {\r\n    width: 50,\r\n    height: 15,\r\n    borderRadius: 500,\r\n    boxShadow: '0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24)',\r\n  },\r\n  '& td': { borderBottom: 'none' },\r\n  '& td:first-of-type': { paddingLeft: '16px !important' },\r\n}));\r\n\r\n// inital login credentials\r\nconst initialValues = {\r\n  product_name: '',\r\n  description: '',\r\n  category_id: '',\r\n  brand_name: '',\r\n  unit_packing: '',\r\n  expiry_date: '',\r\n  available_qty: '',\r\n  hsn_sac_code: '',\r\n  batch_no: '',\r\n  mrp: '',\r\n  product_image: '',\r\n  min_qty: '',\r\n  min_qty_discount: '',\r\n  min_qty_bonus_deal: '',\r\n  min_qty_trade_rate: '',\r\n  min_qty_net_rate: '',\r\n  min_qty_margin_percentage: '',\r\n  status: 'pending',\r\n  tax_category_id: ''\r\n};\r\n\r\n// form field validation schema\r\nconst validationSchema = Yup.object().shape({\r\n  product_name: Yup.string()\r\n    .min(2, 'Product Name must be 10 digit length')\r\n    .required('Product Name is required!'),\r\n  category_id: Yup.string()\r\n    .required('Category is required!'),\r\n  brand_name: Yup.string()\r\n    .required('Brand is required!'),\r\n  expiry_date: Yup.string()\r\n    .required('Expiry Date is required!'),\r\n  available_qty: Yup.number()\r\n    .required('Available Quantity is required!'),\r\n  hsn_sac_code: Yup.string()\r\n    .required('HSN/SAC is required!'),\r\n  mrp: Yup.number()\r\n    .required('MRP is required!'),\r\n  min_qty: Yup.number()\r\n    .required('Quantity is required!'),\r\n  min_qty_discount: Yup.number()\r\n    .required('Discount (%) is required!'),\r\n  min_qty_bonus_deal: Yup.string()\r\n    .required('Bonus (Deal) is required!'),\r\n  min_qty_trade_rate: Yup.number()\r\n    .required('Trade Rate is required!'),\r\n  tax_category_id: Yup.number()\r\n    .required('Tax Category is required!'),\r\n});\r\n\r\nconst AddMedicinesStock = () => {\r\n  const { row_id } = useParams();\r\n  const theme = useTheme();\r\n  const { register } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [categories, setCategory] = useState(false);\r\n  const [brands, setBrands] = useState(false);\r\n  const [tax_categories, setTaxCategories] = useState(false);\r\n  const [product, setProduct] = useState(initialValues);\r\n  const [formData, setFormData] = useState(initialValues);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  /**\r\n    * Fetching data from server.\r\n    */\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await axios.get('/sanctum/csrf-cookie').then(response => {\r\n        axios.post('/api/client/get-brands')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setBrands(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n        axios.post('/api/client/get-categories')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setCategory(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n\r\n\r\n        axios.post('/api/client/get-tax-categories')\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setTaxCategories(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n        axios.post('/api/client/get-medicine', {\r\n          row_id: row_id\r\n        })\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              setProduct(response.data.data);\r\n            } else if (response.data.response_code === 401) {\r\n\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            setLoading(false);\r\n            console.error(error);\r\n          });\r\n      });\r\n    } catch (e) {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  const calculateNetRate = (e, values) => {\r\n    // console.log(e.target.value);\r\n    // console.log(e.target.name);\r\n    var min_qty = 0;\r\n    var min_qty_discount = 0;\r\n    var min_qty_bonus_deal = '';\r\n    var min_qty_trade_rate = 0;\r\n    var min_qty_net_rate = 0;\r\n    var igst = 0;\r\n    var cess = 0;\r\n    var tax_category_id = '';\r\n    switch (e.target.name) {\r\n      case 'min_qty':\r\n        min_qty = parseInt(e.target.value);\r\n        min_qty_discount = (values.min_qty_discount) ? parseInt(values.min_qty_discount) : 0;\r\n        min_qty_bonus_deal = (values.min_qty_bonus_deal) ? values.min_qty_bonus_deal : 0;\r\n        min_qty_trade_rate = (values.min_qty_trade_ratep) ? parseInt(values.min_qty_trade_rate) : 0;\r\n        break;\r\n      case 'min_qty_discount':\r\n        min_qty_discount = parseInt(e.target.value);\r\n        min_qty = (values.min_qty) ? parseInt(values.min_qty) : 0;\r\n        min_qty_bonus_deal = (values.min_qty_bonus_deal) ? values.min_qty_bonus_deal : 0;\r\n        min_qty_trade_rate = (values.min_qty_trade_rate) ? parseInt(values.min_qty_trade_rate) : 0;\r\n        break;\r\n      case 'min_qty_bonus_deal':\r\n        min_qty_bonus_deal = e.target.value;\r\n        min_qty = (values.min_qty) ? parseInt(values.min_qty) : 0;\r\n        min_qty_discount = (values.min_qty_discount) ? parseInt(values.min_qty_discount) : 0;\r\n        min_qty_trade_rate = (values.min_qty_trade_rate) ? parseInt(values.min_qty_trade_rate) : 0;\r\n        break;\r\n      case 'min_qty_trade_rate':\r\n        min_qty_trade_rate = parseInt(e.target.value);\r\n        min_qty = (values.min_qty) ? parseInt(values.min_qty) : 0;\r\n        min_qty_discount = (values.min_qty_discount) ? parseInt(values.min_qty_discount) : 0;\r\n        min_qty_bonus_deal = values.min_qty_bonus_deal;\r\n        break;\r\n      case 'tax_category_id':\r\n        tax_category_id = parseInt(e.target.value);\r\n        min_qty = (values.min_qty) ? parseInt(values.min_qty) : 0;\r\n        min_qty_discount = (values.min_qty_discount) ? parseInt(values.min_qty_discount) : 0;\r\n        min_qty_bonus_deal = (values.min_qty_bonus_deal) ? values.min_qty_bonus_deal : 0;\r\n        min_qty_trade_rate = (values.min_qty_trade_rate) ? parseInt(values.min_qty_trade_rate) : 0;\r\n        break;\r\n\r\n    }\r\n\r\n    var amount_without_tax = 0;\r\n    var qty_trade_rate = 0;\r\n    var qty_trade_rate_dis_pre = 0;\r\n    var dealType = '';\r\n    // console.log('min_qty----:' + min_qty + 'min_qty_discount----:' + min_qty_discount + 'min_qty_bonus_deal----:' + min_qty_bonus_deal + 'min_qty_trade_rate----:' + min_qty_trade_rate);\r\n    if (min_qty && min_qty_trade_rate) {\r\n      qty_trade_rate = (min_qty * min_qty_trade_rate);\r\n      // console.log('CCmin_qty_bonus_deal----:' + min_qty_bonus_deal);\r\n      if (min_qty_bonus_deal == '' || min_qty_bonus_deal == 0 || Number.isInteger(min_qty_bonus_deal)) {\r\n        qty_trade_rate_dis_pre = (qty_trade_rate * min_qty_discount) / 100;\r\n        amount_without_tax = (qty_trade_rate - qty_trade_rate_dis_pre);\r\n        // console.log('Aamount_without_tax----:' + amount_without_tax);\r\n      } else {\r\n        if (min_qty_bonus_deal) {\r\n          min_qty_bonus_deal = min_qty_bonus_deal.replace(/[\\(\\)]/g, \"\");\r\n          dealType = min_qty_bonus_deal.split('+');\r\n          console.log('dealType----:' + dealType + 'dealType.length' + dealType.length);\r\n          if (dealType.length > 1) {\r\n            // console.log('deal_x----:' + dealType[0] + 'deal_y' + dealType[1]);\r\n\r\n            var deal_x = parseInt(dealType[0]);\r\n            var deal_y = parseInt(dealType[1]);\r\n            var deal_pre = (((deal_y) / (deal_x + deal_y)) * 100);\r\n\r\n            var deal_pre_amount = (qty_trade_rate * deal_pre) / 100;\r\n\r\n            var amount_after_deal_pre = (qty_trade_rate - deal_pre_amount);\r\n            var discount_amount = (amount_after_deal_pre * min_qty_discount) / 100;\r\n            amount_without_tax = (amount_after_deal_pre - discount_amount);\r\n            // console.log('Bamount_without_tax----:' + amount_without_tax);\r\n          } else {\r\n            qty_trade_rate_dis_pre = (qty_trade_rate * min_qty_discount) / 100;\r\n            amount_without_tax = (qty_trade_rate - qty_trade_rate_dis_pre);\r\n            // console.log('Camount_without_tax----:' + amount_without_tax);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var total_tax_pre = 0;\r\n\r\n    if (tax_category_id !== '') {\r\n      igst = parseFloat(tax_categories[tax_category_id]['igst']);\r\n      cess = parseFloat(tax_categories[tax_category_id]['cess']);\r\n      if (igst && cess) {\r\n        total_tax_pre = (igst + cess);\r\n      } else {\r\n        total_tax_pre = igst;\r\n      }\r\n    }\r\n\r\n\r\n    var tax_amount = (amount_without_tax * total_tax_pre) / 100;\r\n    min_qty_net_rate = amount_without_tax + tax_amount;\r\n\r\n    return min_qty_net_rate;\r\n  };\r\n\r\n  const changeHandler = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.files[0] });\r\n  };\r\n\r\n  const handleFormSubmit = (values, errors) => {\r\n    setLoading(true);\r\n    try {\r\n      axios.get('/sanctum/csrf-cookie').then(response => {\r\n        const uploadFormData = new FormData();\r\n        for (let iKey in values) {\r\n          if (iKey === 'product_image') {\r\n            uploadFormData.append(iKey, formData[iKey])\r\n          } else {\r\n            if (values[iKey]) {\r\n              uploadFormData.append(iKey, values[iKey])\r\n            } else {\r\n              uploadFormData.append(iKey, '')\r\n            }\r\n          }\r\n        }\r\n        uploadFormData.append('row_id', row_id)\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n        axios.post('/api/client/update-medicine-stock', uploadFormData, config)\r\n          .then(response => {\r\n            if (response.data.response_code === 200) {\r\n              swal({\r\n                title: \"Good job!\",\r\n                text: response.data.message,\r\n                icon: \"success\",\r\n              });\r\n              navigate('/dashboard/medicine/list');\r\n            } else {\r\n              errors.setErrors(response.data.errors);\r\n            }\r\n            setLoading(false);\r\n          })\r\n          .catch(function (error) {\r\n            console.error(error);\r\n          });\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className=\"add-medicine\">\r\n      <Box className=\"breadcrumb\">\r\n        <Breadcrumb routeSegments={[{ name: \"dashboard\", path: \"/dashboard\" }, { name: \"Edit Medicine\" }]} />\r\n      </Box>\r\n      <Card className=\"card\" >\r\n        <CardHeader\r\n          title=\"Edit Medicine\"\r\n          titleTypographyProps={{\r\n            variant: \"h4\",\r\n            fontSize: '16px',\r\n            fontWeight: '600',\r\n            textTransform: 'uppercase',\r\n            textAlign: 'center'\r\n          }}\r\n          action={\r\n            <>\r\n              <Button title=\"Back\" component={Link}\r\n                to={`/dashboard/medicine/list`}\r\n                color=\"inherit\" variant=\"outlined\" size=\"small\" sx={{ m: .5 }}>\r\n                Back\r\n              </Button>\r\n            </>\r\n          }\r\n        />\r\n        <Divider />\r\n        <CardContent>\r\n          <Formik\r\n            onSubmit={(values, errors) => {\r\n              handleFormSubmit(values, errors);\r\n            }\r\n            }\r\n            // initialValues={product}\r\n            // validationSchema={validationSchema}\r\n            initialValues={product}\r\n            enableReinitialize={true}\r\n            validationSchema={validationSchema}\r\n          >\r\n            {({ values, errors, touched, handleChange, handleBlur, handleSubmit, setFieldValue }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <Grid container style={{ padding: '20px 0px' }} spacing={2}>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"product_name\" className='form-label'>\r\n                      Product Name\r\n                    </InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"product_name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.product_name}\r\n                      onChange={handleChange}\r\n                      helperText={touched.product_name && errors.product_name}\r\n                      error={Boolean(errors.product_name && touched.product_name)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"category_id\" className='form-label'>\r\n                      Category\r\n                    </InputLabel>\r\n                    <FormControl fullWidth\r\n                      sx={{ mb: 3 }}\r\n                      size=\"small\"\r\n                    >\r\n                      <Select\r\n                        labelId=\"status-label\"\r\n                        id=\"category_id\"\r\n                        name=\"category_id\"\r\n                        onChange={handleChange}\r\n                        variant=\"outlined\"\r\n                        onBlur={handleBlur}\r\n                        value={values.category_id}\r\n                        error={Boolean(errors.category_id && touched.category_id)}\r\n                      >\r\n                        <MenuItem value=\"\" key=\"sg\">Select Category</MenuItem>\r\n                        {categories && categories.map((row) =>\r\n                          <MenuItem value={row.id} key={row.id}>{row.name}</MenuItem>\r\n                        )}\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"brand_id\" className='form-label'>Brand</InputLabel>\r\n                    <FormControl fullWidth\r\n                      sx={{ mb: 3 }}\r\n                      size=\"small\"\r\n                    >\r\n                      {brands && (\r\n                        <>\r\n                          <Autocomplete\r\n                            freeSolo\r\n                            size=\"small\"\r\n                            id=\"brand_name\"\r\n                            value={values.brand_name}\r\n                            options={brands && brands.map((option) => option.name)}\r\n                            renderInput={(params) =>\r\n                              <TextField\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                name=\"brand_name\"\r\n                                variant=\"outlined\"\r\n                                value={values.brand_name}\r\n                                helperText={touched.unit_packing && errors.unit_packing}\r\n                                error={Boolean(errors.brand_name && touched.brand_name)}\r\n                                {...params}\r\n                              />}\r\n                          />\r\n                          {(errors.brand_name)\r\n                            && (touched.brand_name)\r\n                            && <div style={{ color: '#ff3d57' }}>{`${errors.brand_name}`}</div>}\r\n                        </>\r\n                      )\r\n                      }\r\n                    </FormControl>\r\n                    <label htmlFor=\"unit_packing\" className='form-label'>Unit Packing</label>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"unit_packing\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.unit_packing}\r\n                      onChange={handleChange}\r\n                      helperText={touched.unit_packing && errors.unit_packing}\r\n                      error={Boolean(errors.unit_packing && touched.unit_packing)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} lg={6} >\r\n                    <label htmlFor=\"description\" className='form-label'>Description</label>\r\n                    <br />\r\n                    <TextField\r\n                      fullWidth\r\n                      multiline={true}\r\n                      minRows={6}\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"description\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.description || ''}\r\n                      onChange={handleChange}\r\n                      // helperText={touched.description && errors.description}\r\n                      // error={Boolean(errors.description && touched.description)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"expiry_date\" className='form-label'>Expiry Date</InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"date\"\r\n                      name=\"expiry_date\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.expiry_date}\r\n                      onChange={handleChange}\r\n                      helperText={touched.expiry_date && errors.expiry_date}\r\n                      error={Boolean(errors.expiry_date && touched.expiry_date)}\r\n                      sx={{ mb: 3 }}\r\n\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"available_qty\" className='form-label'>Available Quantity</InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"available_qty\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.available_qty}\r\n                      onChange={handleChange}\r\n                      helperText={touched.available_qty && errors.available_qty}\r\n                      error={Boolean(errors.available_qty && touched.available_qty)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"hsn_sac_code\" className='form-label'>HSN/SAC Code</InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"hsn_sac_code\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.hsn_sac_code}\r\n                      onChange={handleChange}\r\n                      helperText={touched.hsn_sac_code && errors.hsn_sac_code}\r\n                      error={Boolean(errors.hsn_sac_code && touched.hsn_sac_code)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <label htmlFor=\"batch_no\" className='form-label'>Batch No.</label>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"batch_no\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.batch_no}\r\n                      onChange={handleChange}\r\n                      helperText={touched.batch_no && errors.batch_no}\r\n                      error={Boolean(errors.batch_no && touched.batch_no)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n                    <InputLabel required htmlFor=\"mrp\" className='form-label'>\r\n                      MRP\r\n                    </InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"mrp\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.mrp || ''}\r\n                      // onChange={handleChange}\r\n                      onChange={(e) => {\r\n                        handleChange(e)\r\n                        const min_qty_net_rate = parseFloat(calculateNetRate(e, values));\r\n                        var mrp = parseInt(values.mrp);\r\n                        var min_qty_margin_percentage = (((mrp - min_qty_net_rate) * mrp) / 100);\r\n                        setFieldValue(\"min_qty_net_rate\", min_qty_net_rate.toFixed(2));\r\n                        setFieldValue(\"min_qty_margin_percentage\", min_qty_margin_percentage.toFixed(2));\r\n                      }}\r\n                      helperText={touched.mrp && errors.mrp}\r\n                      error={Boolean(errors.mrp && touched.mrp)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12}>\r\n\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container style={{ padding: '20px 0px' }} spacing={2}>\r\n                  <Grid item sm={6} xs={12} lg={2}>\r\n                    <InputLabel required htmlFor=\"min_qty\" className='form-label'>\r\n                      Quantity\r\n                    </InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"min_qty\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.min_qty}\r\n                      // onChange={handleChange}\r\n                      onChange={(e) => {\r\n                        handleChange(e)\r\n                        const min_qty_net_rate = parseFloat(calculateNetRate(e, values));\r\n                        var mrp = parseInt(values.mrp);\r\n                        var min_qty_margin_percentage = (((mrp - min_qty_net_rate) * mrp) / 100);\r\n                        setFieldValue(\"min_qty_net_rate\", min_qty_net_rate.toFixed(2));\r\n                        setFieldValue(\"min_qty_margin_percentage\", min_qty_margin_percentage.toFixed(2));\r\n                      }}\r\n                      helperText={touched.min_qty && errors.min_qty}\r\n                      error={Boolean(errors.min_qty && touched.min_qty)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} lg={2}>\r\n                    <InputLabel required htmlFor=\"min_qty_discount\" className='form-label'>\r\n                      Discount (%)\r\n                    </InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"min_qty_discount\"\r\n                      // label=\"Name\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.min_qty_discount}\r\n                      // onChange={handleChange}\r\n                      onChange={(e) => {\r\n                        handleChange(e)\r\n                        const min_qty_net_rate = parseFloat(calculateNetRate(e, values));\r\n                        var mrp = parseInt(values.mrp);\r\n                        var min_qty_margin_percentage = (((mrp - min_qty_net_rate) * mrp) / 100);\r\n                        setFieldValue(\"min_qty_net_rate\", min_qty_net_rate.toFixed(2));\r\n                        setFieldValue(\"min_qty_margin_percentage\", min_qty_margin_percentage.toFixed(2));\r\n                      }}\r\n                      helperText={touched.min_qty_discount && errors.min_qty_discount}\r\n                      error={Boolean(errors.min_qty_discount && touched.min_qty_discount)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} lg={2}>\r\n                    <InputLabel required htmlFor=\"min_qty_bonus_deal\" className='form-label'>\r\n                      Bonus (Deal)\r\n                    </InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"min_qty_bonus_deal\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.min_qty_bonus_deal || ''}\r\n                      // onChange={handleChange}\r\n                      onChange={(e) => {\r\n                        handleChange(e)\r\n                        const min_qty_net_rate = parseFloat(calculateNetRate(e, values));\r\n                        var mrp = parseInt(values.mrp);\r\n                        var min_qty_margin_percentage = (((mrp - min_qty_net_rate) * mrp) / 100);\r\n                        setFieldValue(\"min_qty_net_rate\", min_qty_net_rate.toFixed(2));\r\n                        setFieldValue(\"min_qty_margin_percentage\", min_qty_margin_percentage.toFixed(2));\r\n                      }}\r\n                      helperText={touched.min_qty_bonus_deal && errors.min_qty_bonus_deal}\r\n                      error={Boolean(errors.min_qty_bonus_deal && touched.min_qty_bonus_deal)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} lg={2}>\r\n                    <InputLabel required htmlFor=\"min_qty_trade_rate\" className='form-label'>\r\n                      Trade Rate\r\n                    </InputLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      size=\"small\"\r\n                      type=\"number\"\r\n                      name=\"min_qty_trade_rate\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.min_qty_trade_rate}\r\n                      onChange={handleChange}\r\n                      onChange={(e) => {\r\n                        handleChange(e)\r\n                        const min_qty_net_rate = parseFloat(calculateNetRate(e, values));\r\n                        var mrp = parseInt(values.mrp);\r\n                        var min_qty_margin_percentage = (((mrp - min_qty_net_rate) * mrp) / 100);\r\n                        setFieldValue(\"min_qty_net_rate\", min_qty_net_rate.toFixed(2));\r\n                        setFieldValue(\"min_qty_margin_percentage\", min_qty_margin_percentage.toFixed(2));\r\n                      }}\r\n                      helperText={touched.min_qty_trade_rate && errors.min_qty_trade_rate}\r\n                      error={Boolean(errors.min_qty_trade_rate && touched.min_qty_trade_rate)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} lg={2}>\r\n                    <label htmlFor=\"min_qty_net_rate\" className='form-label'>Net Rate</label>\r\n                    <TextField\r\n                      fullWidth\r\n                      disabled\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"min_qty_net_rate\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.min_qty_net_rate}\r\n                      onChange={handleChange}\r\n                      // helperText={touched.min_qty_net_rate && errors.min_qty_net_rate}\r\n                      // error={Boolean(errors.min_qty_net_rate && touched.min_qty_net_rate)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} lg={2} xs={12}>\r\n                    <label htmlFor=\"min_qty_margin_percentage\" className='form-label'>Margin%</label>\r\n                    <TextField\r\n                      fullWidth\r\n                      disabled\r\n                      size=\"small\"\r\n                      type=\"text\"\r\n                      name=\"min_qty_margin_percentage\"\r\n                      variant=\"outlined\"\r\n                      onBlur={handleBlur}\r\n                      value={values.min_qty_margin_percentage}\r\n                      onChange={handleChange}\r\n                      // helperText={touched.min_qty_margin_percentage && errors.min_qty_margin_percentage}\r\n                      // error={Boolean(errors.min_qty_margin_percentage && touched.min_qty_margin_percentage)}\r\n                      sx={{ mb: 3 }}\r\n                    />\r\n                  </Grid>\r\n\r\n                </Grid>\r\n                <h4 style={{ color: theme.palette.primary.main, fontSize: '18px', }}>Tax Category</h4>\r\n                <Grid container style={{ padding: '20px 0px' }} spacing={2}>\r\n                  <Grid item sm={12} xs={12} lg={8}>\r\n                    <Box overflow=\"auto\">\r\n                      <TaxCategoryTable>\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>CGST</TableCell>\r\n                            <TableCell>SGST</TableCell>\r\n                            <TableCell>IGST</TableCell>\r\n                            <TableCell>CESS</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {tax_categories && tax_categories.map((tax, index) => (\r\n                            <TableRow key={index}>\r\n                              <TableCell>\r\n                                <Radio\r\n                                  checked={values.tax_category_id == tax.id}\r\n                                  // onChange={handleChange}\r\n                                  onChange={(e) => {\r\n                                    handleChange(e)\r\n                                    const min_qty_net_rate = parseFloat(calculateNetRate(e, values));\r\n                                    var mrp = parseInt(values.mrp);\r\n                                    var min_qty_margin_percentage = (((mrp - min_qty_net_rate) * mrp) / 100);\r\n                                    setFieldValue(\"min_qty_net_rate\", min_qty_net_rate.toFixed(2));\r\n                                    setFieldValue(\"min_qty_margin_percentage\", min_qty_margin_percentage.toFixed(2));\r\n                                  }}\r\n                                  value={tax.id}\r\n                                  name=\"tax_category_id\"\r\n                                  inputProps={{ 'aria-label': 'A' }}\r\n                                />\r\n                              </TableCell>\r\n                              <TableCell>{tax.cgst}</TableCell>\r\n                              <TableCell>{tax.sgst}</TableCell>\r\n                              <TableCell>{tax.igst}</TableCell>\r\n                              <TableCell>{tax.cess}</TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </TaxCategoryTable>\r\n                      {(errors.tax_category_id)\r\n                        && (touched.tax_category_id)\r\n                        && <div style={{ color: '#ff3d57' }}>{`${errors.tax_category_id}`}</div>}\r\n                    </Box>\r\n                  </Grid>\r\n                  <Grid item sm={12} xs={12} lg={4} style={{ textAlign: 'center' }}>\r\n                    <label htmlFor=\"product_image\" className='form-label'>Upload Image</label>\r\n                    {values.product_image && (\r\n                      <>\r\n                        <br />\r\n                        <br />\r\n                        <img src={values.product_image} style={{ width: '300px', height: '200px' }} title=\"Product Image\" />\r\n                        <br />\r\n                      </>\r\n                    )}\r\n                    <FormControl sx={{ mb: 3, float: 'right' }} >\r\n                      <input\r\n                        id=\"upload-photo\"\r\n                        name=\"product_image\"\r\n                        type=\"file\"\r\n                        onChange={changeHandler}\r\n                      />\r\n                    </FormControl>\r\n                    {(errors.product_image)\r\n                      && (touched.product_image)\r\n                      && <div style={{ color: '#ff3d57' }}>{`${errors.product_image}`}</div>}\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid container style={{ padding: '20px 0px' }} spacing={2}>\r\n                  <Grid item sm={6} xs={12} lg={2}>\r\n                    <LoadingButton\r\n                      fullWidth\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      loading={loading}\r\n                      variant=\"contained\"\r\n                      sx={{ mb: 2, mt: 3 }}\r\n                    >\r\n                      Update\r\n                    </LoadingButton>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </CardContent>\r\n      </Card>\r\n    </Container >\r\n  );\r\n};\r\n\r\nexport default AddMedicinesStock;\r\n"],"sourceRoot":""}